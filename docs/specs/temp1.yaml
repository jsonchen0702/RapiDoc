openapi: 3.0.0
info:
  description: Contains all data types
  version: 1.0.0
  title: Testing different data-types
paths:
  /person:
    post:
      tags:
        - Test with various data types
      summary: Data Types with constraints
      description: Request-Parameters and Response-Schema contains various data types and constrains. Check out how is it desplayed below
      parameters:
        - name: marital-status
          in: query
          required: true
          examples: 
            - unmarried
            - married
          schema:
            type: string
            enum:
              - married
              - unmarried
              - widowed
              - unknown
            default: unknown
        - name: interests
          in: query
          required: true
          schema:
            type: array
            example: 
              - hiking
              - movies
            minItems: 1
            maxItems: 3
            items:
              type: string
              enum:
                - hiking
                - movies
                - music
                - dancing
                - reading
                - painting
              default: hiking
              
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/person'
components:
  schemas:
    category:
      type: object
      properties:
        catId:
          description: Category ID
          allOf:
            - $ref: '#/components/schemas/id'
        name:
          description: Category name
          type: string
          minLength: 1
    id:
      type: integer
      format: int64
      readOnly: true
    person:
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          description: Pet ID
          allOf:
            - $ref: '#/components/schemas/id'
        category:
          description: Categories this person belongs to
          allOf:
            - $ref: '#/components/schemas/category'
        dependentIds:
          type: array
          description: IDs of Dependents .
          items:
            type: integer
          example:
            - 278
            - 279
            - 280
            - 281
        name:
          description: Name of the person
          type: string
          minLength: 4
          example: Guru
        photoUrls:
          description: The list of URL to a cute photos featuring pet
          type: array
          maxItems: 20
          items:
            type: string
            format: url
        tags:
          description: Tags attached to the pet
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/tag'
        maritalStatus:
          type: string
          description: Marital status in case of adult
          enum:
            - married
            - unmarried
            - widowed
        phone:
          description: phone number in international format
          type: string
          pattern: '/^\+(?:[0-9]-?){6,14}[0-9]$/'
          example: +1-202-555-0192
          nullable: true
    tag:
      type: object
      properties:
        id:
          description: Tag ID
          allOf:
            - $ref: '#/components/schemas/id'
        name:
          description: Tag name
          type: string
          minLength: 1
