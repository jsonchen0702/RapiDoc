openapi: 3.0.0
info:
  title: Markdown Content
  description: Test case to show markdown support. For more info check specification (http://spec.openapis.org/oas/v3.0.3)
  version: 1.0.0
paths:
  /markdown:
    get:
      summary: Markdown in Description. 
      description: |
        Endpoint to create and initiate a pipeline. 

        ### Paragraph
        In a hole in the ground there lived a hobbit. Not a **nasty**, _dirty_, `wet` hole, filled with the ends
        of worms and an oozy smell, nor yet a dry, bare, sandy hole with nothing in it to sit down on or to
        eat: it was a [hobbit-hole](https://en.wikipedia.org/wiki/Hobbit#Lifestyle "Hobbit lifestyles"), and that means comfort.


        ### Horizontal Rule `---`
        ---

        ### Number List
        1. Install `node`.
        2. Install `npm`.
        3. Open your editor
        4. Create a JavaScript file

        ### Blockquotes
        > This is a sample OpenAPI spec to test the parsing of various markdown styles
        > (RapiDoc supports common-mark syntax)

        ### Buleted List
        - Install `node`.
        - Install `npm`.
        - Open you editor
        - Create a JavaScript file

        ### Table
        | Heading 1 | Left-Justified | Centered | Right-Justified |
        | --------- | :------------- | :------: | --------------: |
        | text | text | text | text |
        | text | text | text | text |
        | text | text | text | text |

        ### Code
        ```
        $ curl -X POST -is -u username:password 
          -H "Content-Type: application/json" https://example.com
          -d '{
          "target": {
            "ref_type": "branch", 
            "type": "pipeline_ref_target", 
            "ref_name": "master"
          }'
        }
        ```
        ### Code (with syntax highlight)
        ```bash
        $ curl -X POST -is -u username:password 
          -H "Content-Type: application/json" https://example.com
          -d '{
          "target": {
            "ref_type": "branch", 
            "type": "pipeline_ref_target", 
            "ref_name": "master"
          }'
        }
        ```

      parameters:
        - name: full-name
          in: query
          description: |
           Field descriptions can contain `Markdown` (Markdown must be monospaced)<br/>
           **CONSTRAINTS** 
           ```
            - At least 3 characters
            - Cannot have space
            - Cannot have number
            - First Letter must be capital
           ```
          required: true
          schema:
            type: string
            minimum: 3
        - name: height
          in: query
          description: Height in `inches` (inches must be monospaced)
          required: true
          schema:
            type: integer
            format: int32
            minimum: 12
            maximum: 120
        - name: interests
          in: query
          required: true
          description: Default is `hiking` (hiking must be monospaced)
          schema:
            type: array
            minItems: 1
            maxItems: 3
            items:
              type: string
              enum:
                - computers
                - hiking
                - swiming
              default: hiking 

      responses:
        '200':
          description: Response Schema field contains `Markdown` contents  (Markdown must be monospaced)
          content:
            application/json:
              schema:
                type: object
                description: Description of `Person` object (Person must be monospaced)
                properties:
                  fullName:
                    description: Person's Full name is made up of `firstName` and `lastName` (firstName and lastName must be mono-spaced).
                    type: object
                    properties:
                      firstName:
                        description: _First name_ (First name should be italics)
                        type: string
                      lastName:
                        description: |
                          `Last name` (last name must be monospaced)
                        type: string
                  dependentNames:
                    type: array
                    description: Array of **Dependents** (Dependents must be bold).
                    items:
                      type: object
                      description: Full Name Object is made up of `firstName` and `lastName` (firstName and lastName must be mono-spaced).
                      properties:
                        fullName:
                          description: Parts of **First Name** (First Name must be bold)
                          type: object
                          properties:
                            firstName:
                              description: Dependent First Name
                              type: string
                            lastName:
                              description: Dependent Last Name
                              type: string
