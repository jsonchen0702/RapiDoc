---
openapi: 3.0.3
info:
  title: CAS Management API
  contact:
    name: Sonicwall Inc
  license:
    name: Commercial
  version: 1.0.0
servers:
- url: "{scheme}://{host}:{port}"
  description: Management API Server
  variables:
    scheme:
      default: http
      enum:
      - http
      - https
    host:
      default: localhost
      description: Host
    port:
      default: "8091"
tags:
- name: App Registrations
- name: Tenants and Users
paths:
  /api/authenticate/user:
    post:
      tags:
      - Auth Controller
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        "200":
          description: OK
  /api/cloud-app-info:
    get:
      tags:
      - App Registrations
      description: "Get CEAS App registration details with various clouds such as\
        \ Azure, GCP"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudAppRegistrationResponse'
  /api/cloud-fetcher-service/ping:
    get:
      tags:
      - Cloud Fetcher Api Controller
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /api/data/create-opensearch-data:
    get:
      tags:
      - Data Controller
      parameters:
      - name: drop-existing-data
        in: query
        schema:
          default: "true"
          type: boolean
      responses:
        "200":
          description: OK
  /api/data/create-opensearch-indexes:
    get:
      tags:
      - Data Controller
      responses:
        "200":
          description: OK
  /api/data/create-schema:
    get:
      tags:
      - Data Controller
      responses:
        "200":
          description: OK
  /api/data/generate-fake-data:
    get:
      tags:
      - Data Controller
      parameters:
      - name: drop-existing-data
        in: query
        schema:
          default: "true"
          type: boolean
      responses:
        "200":
          description: OK
  /api/experimental/notify-cloud-activity:
    post:
      tags:
      - Push To Queue Controller
      parameters:
      - name: job-count
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueuePacket'
      responses:
        "200":
          description: OK
  /api/experimental/sse:
    get:
      tags:
      - Server Sent Event Controller
      responses:
        "200":
          description: OK
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/PublisherString'
  /api/mails/search:
    post:
      tags:
      - Mails Controller
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchInput'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MailResponse'
  /api/ping:
    get:
      tags:
      - Ping Controller
      responses:
        "200":
          description: OK
  /api/redirect-uri/receive-azure-consent:
    get:
      tags:
      - O Auth Token Receiver
      parameters:
      - name: admin_consent
        in: query
        schema:
          default: ""
          type: string
      - name: tenant
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/TemplateInstance'
    post:
      tags:
      - O Auth Token Receiver
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                access_token:
                  default: ""
                  type: string
                error_description:
                  type: string
                error:
                  default: ""
                  type: string
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/TemplateInstance'
  /api/sse/stream:
    get:
      tags:
      - Server Sent Event Controller
      responses:
        "200":
          description: OK
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/PublisherString'
  /api/system/config:
    get:
      tags:
      - System Controller
      responses:
        "200":
          description: OK
  /api/system/whoami:
    get:
      tags:
      - System Controller
      responses:
        "200":
          description: OK
  /api/template/list:
    get:
      tags:
      - Notification Template Controller
      parameters:
      - name: sw-tenant-id
        in: query
        description: ignored for tenant_admin
        schema:
          default: ""
          type: string
      - name: template-id
        in: query
        schema:
          default: ""
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme:
        - admin
        - tenant_admin
  /api/template/update:
    put:
      tags:
      - Notification Template Controller
      parameters:
      - name: sw-tenant-id
        in: query
        description: ignored for tenant_admin
        schema:
          default: ""
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationTemplateEntity'
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme:
        - admin
        - tenant_admin
  /api/template/{templateId}/render:
    post:
      tags:
      - Notification Template Controller
      parameters:
      - name: templateId
        in: path
        required: true
        schema:
          default: ""
          type: string
      - name: sw-tenant-id
        in: query
        description: ignored for tenant_admin
        schema:
          default: ""
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme:
        - admin
        - tenant_admin
  /api/template/{templateId}/vars:
    get:
      tags:
      - Notification Template Controller
      parameters:
      - name: templateId
        in: path
        required: true
        schema:
          default: ""
          type: string
      - name: sw-tenant-id
        in: query
        description: ignored for tenant_admin
        schema:
          default: ""
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme:
        - admin
        - tenant_admin
  /api/tenants/admin/consent:
    put:
      tags:
      - Tenants and Users
      parameters:
      - name: app-type
        in: query
        schema:
          default: ""
          type: string
      - name: microsoft-tenant-id
        in: query
        schema:
          default: ""
          type: string
      - name: sw-tenant-id
        in: query
        description: ignored for tenant_admin
        schema:
          default: ""
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme:
        - admin
        - tenant_admin
  /api/tenants/licenses:
    put:
      tags:
      - Tenants and Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantLicenses'
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme:
        - admin
        - tenant_admin
  /api/tenants/list:
    get:
      tags:
      - Tenants and Users
      parameters:
      - name: page
        in: query
        description: 'Starts from 1 '
        schema:
          format: int32
          default: 1
          type: integer
        example: 1
      - name: page-size
        in: query
        schema:
          format: int32
          default: 20
          type: integer
        example: 20
      - name: sort
        in: query
        description: Sort Column name
        schema:
          type: string
      - name: sw-tenant-id
        in: query
        description: use regex
        schema:
          default: ""
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme:
        - admin
  /api/tenants/onboard:
    post:
      tags:
      - Tenants and Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTenant'
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme:
        - admin
        - tenant_admin
  /api/tenants/{swTenantId}:
    delete:
      tags:
      - Tenants and Users
      parameters:
      - name: swTenantId
        in: path
        required: true
        schema:
          default: ""
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme:
        - admin
  /api/test/echo-token:
    get:
      tags:
      - Test Controller
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme:
        - USER
  /api/test/exception:
    get:
      tags:
      - Test Controller
      responses:
        "200":
          description: OK
  /api/test/license-ok:
    get:
      tags:
      - Test Controller
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme:
        - USER
  /api/test/license-restricted:
    get:
      tags:
      - Test Controller
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme:
        - USER
  /api/test/read-resource:
    get:
      tags:
      - Test Controller
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /api/test/req-info:
    get:
      tags:
      - Test Controller
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /api/test/role/admin:
    get:
      tags:
      - Test Controller
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme:
        - ADMIN
  /api/test/role/no-user:
    get:
      tags:
      - Test Controller
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /api/test/role/permit-all:
    get:
      tags:
      - Test Controller
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /api/test/role/user:
    get:
      tags:
      - Test Controller
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme:
        - user
  /api/test/translate/{word}:
    get:
      tags:
      - Test Controller
      parameters:
      - name: word
        in: path
        required: true
        schema:
          default: success
          type: string
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /api/users/all:
    delete:
      tags:
      - Tenants and Users
      parameters:
      - name: sw-tenant-id
        in: query
        description: ignored for tenant_admin
        schema:
          default: ""
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme:
        - admin
        - tenant_admin
  /api/users/delta-link:
    delete:
      tags:
      - Tenants and Users
      parameters:
      - name: sw-tenant-id
        in: query
        description: ignored for tenant_admin
        schema:
          default: ""
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme:
        - admin
        - tenant_admin
  /api/users/license/{action}:
    put:
      tags:
      - Tenants and Users
      parameters:
      - name: action
        in: path
        required: true
        schema:
          enum:
          - assign
          - revoke
      - name: sw-tenant-id
        in: query
        description: ignored for tenant_admin
        schema:
          default: ""
          type: string
      - name: uid
        in: query
        schema:
          default: ""
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme:
        - admin
        - tenant_admin
  /api/users/list:
    get:
      tags:
      - Tenants and Users
      parameters:
      - name: page
        in: query
        description: "Page No, Starts from 1"
        schema:
          format: int32
          default: 1
          type: integer
        example: 1
      - name: page-size
        in: query
        schema:
          format: int32
          default: 20
          type: integer
        example: 20
      - name: search
        in: query
        description: Search String
        schema:
          default: ""
          type: string
      - name: sort
        in: query
        description: Sort Column name
        schema:
          type: string
      - name: sw-tenant-id
        in: query
        description: ignored for tenant_admin
        schema:
          default: ""
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme:
        - admin
        - tenant_admin
  /api/users/messages/list:
    get:
      tags:
      - Tenants and Users
      parameters:
      - name: page
        in: query
        description: "Page No, Starts from 1 "
        schema:
          format: int32
          default: 1
          type: integer
        example: 1
      - name: page-size
        in: query
        schema:
          format: int32
          default: 20
          type: integer
        example: 20
      - name: sort
        in: query
        description: Sort Column name
        schema:
          type: string
      - name: sw-tenant-id
        in: query
        description: ignored for tenant_admin
        schema:
          default: ""
          type: string
      - name: user-id
        in: query
        description: User ID (primary email)
        schema:
          default: ""
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme:
        - tenant_admin
  /api/users/sync-users-using-access-token:
    post:
      tags:
      - Tenants and Users
      parameters:
      - name: id-provider-token
        in: header
        schema:
          default: ""
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme:
        - tenant_admin
  /api/users/sync-users-using-registered-app:
    post:
      tags:
      - Tenants and Users
      parameters:
      - name: sw-tenant-id
        in: query
        description: ignored for tenant_admin
        schema:
          default: ""
          type: string
      - name: use-delta
        in: query
        schema:
          default: true
          type: boolean
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme:
        - admin
components:
  schemas:
    ActionEnum:
      enum:
      - add_header
      - append
      - approval_box
      - capture_box
      - delete
      - delete_header
      - deliver
      - encrypt
      - prepend
      - quarantine
      - reject
      - skip_capture
      - skip_url_analysis
      - strip_attachment
      - tag
      type: string
    AppRegistrationsEntity:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ObjectId'
        appType:
          type: string
        clientId:
          type: string
        clientSecret:
          type: string
        redirectTokenUri:
          type: string
        redirectConsentUri:
          type: string
        redirectTokenUriForTest:
          type: string
        redirectConsentUriForTest:
          type: string
    CloudAppRegistrationResponse:
      type: object
      properties:
        msgType:
          $ref: '#/components/schemas/MessageTypeEnum'
        msg:
          type: string
        userMsg:
          type: string
        successMessage:
          type: string
          writeOnly: true
        errorMessage:
          type: string
          writeOnly: true
        validationFailedMessage:
          type: string
          writeOnly: true
        authFailedMessage:
          type: string
          writeOnly: true
        list:
          type: array
          items:
            $ref: '#/components/schemas/AppRegistrationsEntity'
    CompanyDetails:
      type: object
      properties:
        name:
          type: string
        domain:
          type: string
    DirectionEnum:
      enum:
      - in
      - internal
      - out
      type: string
    License:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/LicenseTypeEnum'
        quantity:
          format: int32
          type: integer
        expiryDate:
          description: YYYY-MM-DD
          type: string
          example: 2021-01-30
        isTrial:
          type: boolean
        trial:
          type: boolean
    LicenseTypeEnum:
      enum:
      - advanced
      - basic
      - none
      type: string
    Login:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    Mail:
      type: object
      properties:
        id:
          type: string
        swTenantId:
          type: string
        tenantDomain:
          type: string
        sassProvider:
          type: string
        uid:
          type: string
        direction:
          $ref: '#/components/schemas/DirectionEnum'
        threat:
          $ref: '#/components/schemas/ThreatEnum'
        action:
          $ref: '#/components/schemas/ActionEnum'
        subject:
          type: string
        senderEmail:
          type: string
        senderName:
          type: string
        fromIp:
          type: string
        fromEmail:
          type: string
        fromName:
          type: string
        toIp:
          type: string
        toEmail:
          type: string
        toName:
          type: string
        recipients:
          type: array
          items:
            type: string
        hasAttachments:
          type: boolean
        attachmentNames:
          type: array
          items:
            type: string
        virusName:
          type: string
        policyName:
          type: string
        dlpName:
          type: string
        connectingIp:
          type: string
        dataFile:
          type: string
        date:
          format: date-time
          type: string
        allowRestore:
          type: boolean
        restoreStatus:
          $ref: '#/components/schemas/RestoreStatusEnum'
        restoreComment:
          type: string
        restoreDeclineComment:
          type: string
        restoreRequestedOn:
          format: date-time
          type: string
        restoredActionDate:
          format: date-time
          type: string
    MailResponse:
      type: object
      properties:
        msgType:
          $ref: '#/components/schemas/MessageTypeEnum'
        msg:
          type: string
        userMsg:
          type: string
        successMessage:
          type: string
          writeOnly: true
        errorMessage:
          type: string
          writeOnly: true
        validationFailedMessage:
          type: string
          writeOnly: true
        authFailedMessage:
          type: string
          writeOnly: true
        total:
          format: int64
          type: integer
        list:
          type: array
          items:
            $ref: '#/components/schemas/Mail'
        nextSearchAfter:
          type: array
          items: {}
    MessageTypeEnum:
      enum:
      - AUTH_FAILED
      - ERROR
      - NO_LICENSE
      - SUCCESS
      - VALIDATION_FAILED
      - WARNING
      type: string
    NewTenant:
      type: object
      properties:
        tenantId:
          description: Sonicwall Tenant ID
          type: string
        tenantAdminId:
          type: string
        subscriptionStatus:
          type: string
        registrationDate:
          description: YYYY-MM-DD
          type: string
          example: 2021-01-30
        companyDetails:
          $ref: '#/components/schemas/CompanyDetails'
    NotificationTemplateEntity:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ObjectId'
        swTenantId:
          type: string
        templateId:
          type: string
        templateLabel:
          type: string
        notificationSubject:
          type: string
        notificationBody:
          type: string
        includeHeader:
          type: boolean
        includeFooter:
          type: boolean
        isActive:
          type: boolean
        notifyToList:
          type: string
        lastUpdateDate:
          type: string
    ObjectId:
      type: object
      properties:
        timestamp:
          format: int32
          type: integer
        counter:
          format: int32
          type: integer
        randomValue1:
          format: int32
          type: integer
        randomValue2:
          type: integer
        date:
          format: date
          type: string
    PublisherString:
      type: object
    QueuePacket:
      type: object
      properties:
        id:
          format: int32
          type: integer
        data:
          type: string
    RestoreStatusEnum:
      enum:
      - approved
      - declined
      - none
      - requested
      type: string
    SearchInput:
      description: Search Input Query
      type: object
      properties:
        query:
          description: Uses lucene query syntax
          type: string
          example: "swTenantId:crickettes* AND NOT (threat:good OR threat:spam) AND\
            \ date:[2020-11-03T00:00:00Z TO 2021-05-31T00:00:00Z]"
        sort:
          description: "comma separated list of fields, use `-` prefix to indicate\
            \ descending order"
          type: string
          example: "-date, threat"
        pageSize:
          format: int32
          default: "100"
          type: integer
          example: 5
        searchAfter:
          description: array containing sort values of last search request. If empty
            it list from beginning
          default: "[]"
          type: array
          items: {}
          example: []
    TemplateInstance:
      type: object
    TenantLicenses:
      type: object
      properties:
        tenantId:
          description: Sonicwall Tenant ID
          type: string
        licenses:
          type: array
          items:
            $ref: '#/components/schemas/License'
    ThreatEnum:
      enum:
      - dlp
      - good
      - internal
      - likely_phishing
      - likely_spam
      - likely_virus
      - phishing
      - policy
      - spam
      - virus
      type: string
  securitySchemes:
    SecurityScheme:
      type: http
      description: Authentication
      scheme: bearer
      bearerFormat: JWT
