{"version":3,"file":"0.rapidoc-min.js","sources":["webpack:///external \"esprima\"","webpack:///./src/components/json-tree.js","webpack:///./src/components/schema-tree.js","webpack:///./src/components/tag-input.js","webpack:///./src/styles/flex-styles.js","webpack:///./src/styles/input-styles.js","webpack:///./src/styles/common-styles.js","webpack:///./src/utils/common-utils.js","webpack:///./src/components/api-request.js","webpack:///./src/components/api-response.js","webpack:///./src/components/end-point.js","webpack:///./src/components/security-schemes.js","webpack:///./src/rapidoc.js"],"sourcesContent":["if(typeof esprima === 'undefined') {var e = new Error(\"Cannot find module 'esprima'\"); e.code = 'MODULE_NOT_FOUND'; throw e;}\nmodule.exports = esprima;","import { LitElement, html } from 'lit-element'; \nimport vars from '@/styles/vars';\nimport FontStyles from '@/styles/font-styles';\n\nexport default class JsonTree extends LitElement {\n  render() {\n    return html`\n      ${FontStyles}\n      <style>\n        .tree{\n          font-family: var(--font-mono);\n          font-size:12px;\n          display:inline-block;\n          overflow:hidden;\n          word-break: break-all;\n          width:100%;\n        }\n        .left-bracket{\n          display:inline-block;\n          padding: 0 20px 0 0;\n          cursor:pointer;\n          border: 1px solid transparent;\n          border-radius:3px;\n        }\n        .left-bracket:hover{\n          color:var(--primary-color);\n          background-color:var(--hover-color);\n          border: 1px solid var(--border-color);\n        }\n        .inside-bracket{\n          padding-left:12px;\n          border-left:1px dotted var(--border-color);\n        }\n        .string{color:#86b300;}\n        .number{color:#47afe8;}\n        .null{color:orangered;}\n        .boolean{color:#b96ff1}\n        .object{color:var(--fg)}\n      </style>\n      <div class=\"tree\">\n        ${this.generateTree(this.data)}\n      </div>  \n    `\n  }\n\n  static get properties() {\n    return {\n      data:{type: Object}\n    };\n  }\n\n  generateTree(data){\n    if (data===null){\n      return html`<div class=\"null\" style=\"display:inline;\">null</div>`\n    }\n    if (typeof data === 'object'){\n      let detailType = Array.isArray(data)?\"array\":\"pure_object\";\n      if (Object.keys(data).length===0){\n        return html`${ (Array.isArray(data)?'[ ]':'{ }') }`\n      }\n      return html`\n      <div class=\"left-bracket expanded ${detailType==='array'?'array':'object'} \" @click=\"${this.toggleExpand}\" > ${detailType==='array'?'[':'{'}</div>\n        <div class=\"inside-bracket\">\n        ${Object.keys(data).map(key => \n          html`<div class=\"item\"> ${detailType==='pure_object'?html`${key}:`:``}${this.generateTree(data[key])}</div>`\n        )}\n        </div>\n      <div class=\"right-bracket\">${detailType==='array'?']':'}'}</div>\n      `\n    }\n    else{\n      return typeof data==='string'?html`<span class=\"${typeof data}\">\"${data}\"</span>`: html`<span class=\"${typeof data}\">${data}</span>`;\n    }\n\n  }\n\n  toggleExpand(e){\n    console.log(e.target.nextElementSibling);\n    if (e.target.classList.contains(\"expanded\")){\n      e.target.classList.add(\"collapsed\");\n      e.target.classList.remove(\"expanded\");\n      e.target.innerHTML = e.target.classList.contains(\"array\")? \"[...]\":\"{...}\";\n      e.target.nextElementSibling.style.display = \"none\";\n      e.target.nextElementSibling.nextElementSibling.style.display= \"none\";\n    }\n    else{\n      e.target.classList.remove(\"collapsed\");\n      e.target.classList.add(\"expanded\");\n      e.target.innerHTML = e.target.classList.contains(\"array\")? \"[\":\"{\";\n      e.target.nextElementSibling.style.display = \"block\";\n      e.target.nextElementSibling.nextElementSibling.style.display= \"block\";\n    }\n\n    //console.log(e.target.parentElement.querySelectorAll(\":scope > .inside-bracket\"));\n  }\n}\n// Register the element with the browser\ncustomElements.define('json-tree', JsonTree);\n","import { LitElement, html } from 'lit-element'; \nimport vars from '@/styles/vars';\nimport FontStyles from '@/styles/font-styles';\nimport marked from 'marked';\nimport {unsafeHTML} from 'lit-html/directives/unsafe-html.js';\n\nexport default class SchemaTree extends LitElement {\n  render() {\n    return html`\n      ${FontStyles}\n      <style>\n        .tree{\n          font-family: var(--font-mono);\n          font-size:12px;\n          display:inline-block;\n          overflow:hidden;\n          width:100%;\n        }\n        .item{\n          white-space: nowrap;\n          display: table;\n        }\n        .item-key{\n          display:inline;\n        }\n        .item-value{\n          display: table-cell;\n          white-space: normal;\n        }\n        .item-type{\n          display: table-cell;\n        }\n        .obj-descr{\n          color:var(--light-fg);\n          font-family:var(--font-regular);\n          display:inline;\n          white-space:normal;\n        }\n        .item-descr{\n          color:var(--light-fg);\n          display: table-cell;\n          padding-left:12px;\n          min-width: 125px;\n          font-family:var(--font-regular);\n        }\n        .descr-expander{\n          display: table-cell;\n          cursor:pointer;\n          color:orange;\n        }\n        .left-bracket{\n          display:inline-block;\n          padding: 0 20px 0 0;\n          cursor:pointer;\n          border: 1px solid transparent;\n          border-radius:3px;\n        }\n        .left-bracket:hover{\n          color:var(--primary-color);\n          background-color:var(--hover-color);\n          border: 1px solid var(--border-color);\n        }\n        .inside-bracket{\n          padding-left:12px;\n          border-left:1px dotted var(--border-color);\n        }\n        /*\n        .m-markdown > p{\n          margin-block-start:0;\n          margin-block-end:5px;\n        }\n        */\n        .stri, .string{color:#86b300;}\n        .inte, .numb, .number{color:#47afe8;}\n        .null {color:orangered;}\n        .bool, .boolean{color:#b96ff1}\n        .enum {color:orange}\n        @media only screen and (min-width: 768px){\n          .item-descr{\n            padding-left:24px;\n          }\n        }\n\n\n\n      </style>\n      <div class=\"tree\">\n        ${this.generateTree(this.data)}\n      </div>  \n    `\n  }\n\n  static get properties() {\n    return {\n      data:{type: Object}\n    };\n  }\n\n  generateTree(data){\n    if (data===null){\n      return html`<div class=\"null\" style=\"display:inline;\">null</div>`\n    }\n    if (typeof data === 'object'){\n      let detailType = Array.isArray(data)?\"array\":\"pure_object\";\n      if (Object.keys(data).length===0){\n        return html`${ (Array.isArray(data)?'[ ]':'{ }') }`\n      }\n      if ((Object.keys(data).length===1) && Object.keys(data)[0]===':description' ){\n        return html`{ } <span class='obj-descr'> ${data[':description']} </span>`\n      }\n      if (detailType==='array' && data[0]==='~|~' ){\n        return html`[ ]`\n      }\n      return html`\n      <div class=\"left-bracket expanded ${detailType==='array'?'array':'object'} \" @click=\"${this.toggleExpand}\" > ${detailType==='array'?`[`:'{'}</div>\n        ${data[':description']?html`<span class='obj-descr obj-content-part'> ${data[':description']} </span>`:''}\n        <div class=\"inside-bracket obj-content-part\" >\n        ${Object.keys(data).map(\n          key => html`\n            ${key!==':description'? html`<div class=\"item\"> <span class=\"item-key\"> \n              ${detailType==='pure_object'?html`${key}:`\n              :``} \n            </span>${this.generateTree(data[key])}</div>`\n            :''}`\n        )}\n        </div>\n      <div class=\"right-bracket obj-content-part\">${detailType==='array'?']':'}'}</div>\n      `\n    }\n    else{\n      return html`<span class=\"item-value\">\n        ${data ? html`\n          ${data.split(\"~|~\").map(\n            (item,idx) => html`\n              ${item? html`<div class='${idx==0?'item-type ' + item.substring(0,4):'m-markdown-small item-descr'}'>\n                ${idx==0?html`${item}`:html`${unsafeHTML(marked(item))}`\n                }</div>`\n              :``}`\n          )}`:''\n        }\n      </span>`\n\n\n    }\n\n  }\n\n  toggleExpand(e){\n    if (e.target.classList.contains(\"expanded\")){\n      e.target.classList.add(\"collapsed\");\n      e.target.classList.remove(\"expanded\");\n      e.target.innerHTML = e.target.classList.contains(\"array\")? \"[...]\":\"{...}\";\n      let els = e.target.parentNode.querySelectorAll(\":scope > .obj-content-part\")\n      els.forEach( el => el.style.display='none');\n    }\n    else{\n      e.target.classList.remove(\"collapsed\");\n      e.target.classList.add(\"expanded\");\n      e.target.innerHTML = e.target.classList.contains(\"array\")? \"[\":\"{\";\n      let els = e.target.parentNode.querySelectorAll(\":scope > .obj-content-part\");\n      els.forEach( el =>  el.style.display=  el.classList.contains(\"obj-descr\")?'inline':'block');\n    }\n\n    //console.log(e.target.parentElement.querySelectorAll(\":scope > .inside-bracket\"));\n  }\n  toggleDescr(){\n    console.log(\"descr\")\n  }\n}\n// Register the element with the browser\ncustomElements.define('schema-tree', SchemaTree);\n","import { LitElement, html, css } from 'lit-element'; \n\nexport default class TagInput extends LitElement {\n  render() {\n    return html`\n    \n    <div class='tags' tabindex=\"0\" contenteditable=\"true\">\n      <input type=\"text\" class='editor' @paste=\"${this.afterPaste}\" @keydown=\"${this.afterKeyDown}\" placeholder=\"${this.placeholder}\"/>\n    </div>\n  `\n  }\n  static get styles() {\n    return [ css`\n      .tags{\n        display:flex;\n        flex-wrap: wrap;\n        outline: none;\n        padding:0;\n        border-radius:var(--border-radius);\n        border:1px solid var(--input-border-color);\n        cursor:text;\n        overflow:hidden;\n      }\n      .tag, .editor{\n        padding:3px;\n        margin:2px;\n      }\n      .tag{\n        border:1px solid var(--border-color);\n        background-color:var(--bg2);\n        color:var(--fg2);\n        border-radius:var(--border-radius);\n        word-break: break-all;\n        cursor: none;\n      }\n      .tag:hover ~ #cursor {\n        display: block;\n      }\n      .editor{\n        flex:1;\n        border:1px solid transparent;\n        background:var(--input-bg);\n        color:var(--fg);\n        min-width:60px;\n        outline: none;\n        line-height: inherit;\n        font-family:inherit;\n        font-size:inherit;\n      }\n      .editor::placeholder {\n        color: var(--placeholder-color);\n        opacity:1;\n      }\n    `]\n  }\n\n  static get properties() {\n    return {\n      placeholder:{ type: String },\n    };\n  }\n\n  afterPaste(e){\n    let clipboardData = e.clipboardData || window.clipboardData;\n    let pastedData = clipboardData.getData('Text');\n    console.log(pastedData);\n  }\n\n  afterKeyDown(e){\n    if (e.keyCode === 13) {\n      e.stopPropagation();\n      e.preventDefault();\n      let spanEl = document.createElement('span');\n      if (e.target.value.trim()!==''){\n        spanEl.innerText = e.target.value;\n        e.target.value='';\n        spanEl.classList.add('tag');\n        spanEl.setAttribute(\"contenteditable\",\"false\");\n        this.shadowRoot.querySelector(\".tags\").insertBefore(spanEl, e.target);\n      }\n    }\n    else if (e.keyCode === 8){\n      if (e.target.selectionStart === 0 && e.target.previousSibling){\n        e.target.previousSibling.remove();\n      }\n    }\n  }\n\n  getValues(){\n    let vals = [];\n    let tags = this.shadowRoot.querySelectorAll(\".tag\");\n    for(let tagEl of tags){\n      vals.push(tagEl.innerText);\n    }\n    return vals;\n  }\n}\n// Register the element with the browser\ncustomElements.define('tag-input', TagInput);","import vars from './vars';\nimport {html} from 'lit-element'; \n\nexport default html`\n<style>\n  .row, .col{\n    display:flex;\n  } \n  .row{\n    align-items:center;\n    flex-direction: row;\n  }\n  .col{\n    align-items:stretch;\n    flex-direction: column;\n  }\n</style>`\n","import vars from './vars';\nimport {html} from 'lit-element'; \n\nexport default html`\n<style>\ninput, select, button {\n  font-family: var(--font-regular);\n  font-weight:400;\n  color:var(--fg);\n}\n\n/* Button */\n.m-btn{\n  border-radius: var(--border-radius);\n  font-weight: 600;\n  display: inline-block;\n  padding: 6px 16px;\n  font-size: 12px;\n  outline: 0;\n  line-height: 1;\n  text-align: center;\n  white-space: nowrap;\n  background-color:var(--primary-color);\n  color:var(--primary-text);\n  border: 1px solid var(--primary-color);\n  transition: background-color 0.2s;\n  user-select: none;\n  cursor: pointer;\n}\n\n.m-btn.large{padding:8px 14px;}\n.m-btn.small{padding:5px 12px;}\n.m-btn.circle{border-radius:50%;}\n.m-btn:hover{ background-color: var(--primary-color)}\n\n/* Form Inputs */\ntextarea,\ninput[type=\"file\"],\ninput[type=\"text\"],\ninput[type=\"password\"]{\n  border-radius:var(--border-radius);\n  border:1px solid var(--input-border-color);\n  background:var(--input-bg);\n  color:var(--fg);\n  transition: border .2s;\n  outline: none;\n  font-size:13px;\n  padding:6px 5px;\n  box-sizing: border-box;\n}\n\ntextarea.mono,\ninput[type=\"text\"].mono,\ninput[type=\"password\"].mono{\n  font-family: var(--font-mono); \n  font-size:12px;\n}\n\ninput[type=\"text\"].large,\ninput[type=\"password\"].large {\n    padding:10px 8px;\n    font-size:13px;\n}\n\n\ntextarea::placeholder,\ninput[type=\"text\"]::placeholder,\ninput[type=\"password\"]::placeholder {\n    color: var(--placeholder-color);\n    opacity:1;\n}\n\ntextarea:focus,\ninput[type=\"text\"]:focus,\ninput[type=\"password\"]:focus,\ntextarea:active,\ninput[type=\"text\"]:active,\ninput[type=\"password\"]:active {\n    border:1px solid var(--primary-color);\n}\n\ntextarea.reverse,\ninput.reverse[type=\"text\"],\ninput.reverse[type=\"password\"]{\n  background:${vars.color.inputReverseBg};\n  color:${vars.color.inputReverseFg};\n  border:1px solid var(--primary-color); \n}\n\ntextarea.reverse:focus,\ninput.reverse[type=\"text\"]:focus,\ninput.reverse[type=\"password\"]:focus,\ntextarea.reverse:active,\ninput.reverse[type=\"text\"]:active,\ninput.reverse[type=\"password\"]:active{\n    border:1px solid var(--primary-color);\n}\n\ntextarea.reverse::placeholder,\ninput.reverse::placeholder{\n    color: #666;\n}\n\ntextarea::-webkit-scrollbar-track{\n    background-color: transparent;\n}\n  \ntextarea::-webkit-scrollbar{\n    width: 8px;\n    height: 8px;\n    background-color: transparent;\n}\n \ntextarea::-webkit-scrollbar-thumb {\n    background-color: rgba(50,50,50, .5);\n}\n</style>`\n","import {html} from 'lit-element'; \nimport vars from './vars';\nexport default html`\n<style>\na{ color: var(--link-color); }\n.border{\n  border:1px solid var(--border-color);\n  border-radius: var(--border-radius);\n}\n.light-border{\n  border:1px solid var(--light-border-color);\n  border-radius: var(--border-radius);\n}\n</style>`\n","/* For Delayed Event Handler Execution */\nfunction debounce (fn, delay) {\n    var timeoutID = null;\n    return function () {\n      clearTimeout(timeoutID)\n      var args = arguments\n      var that = this\n      timeoutID = setTimeout(function () {\n        fn.apply(that, args)\n      }, delay)\n    }\n}\n\nfunction copyToClipboard(elId) {\n    /* Get the text field */\n    var copyText = document.getElementById(elId);\n  \n    /* Select the text field */\n    copyText.select();\n  \n    /* Copy the text inside the text field */\n    document.execCommand(\"copy\");\n    return copyText.value;\n}\n\n/* Generates an schema object containing type and constraint info */\nfunction getTypeInfo(schema, overrideAttributes=null){\n  let returnObj = {\n    hasCircularRefs:schema.type===\"circular\",\n    format    : schema.format?schema.format:'',\n    pattern   : (schema.pattern && !schema.enum) ? schema.pattern:'',\n    readOnly  : schema.readOnly ? '🆁\\u00a0' : '',\n    writeOnly : schema.writeOnly ? '🆆\\u00a0' : '',\n    depricated: schema.deprecated ? '❌\\u00a0' : '',\n    default   : schema.default==0 ? '0 ': (schema.default ? schema.default : ''),\n    type      : '',\n    arrayType : '',\n    allowedValues:'',\n    constrain : '',\n    html      : ''\n  };\n  if (returnObj.hasCircularRefs){\n    return returnObj;\n  }\n  // Set the Type\n  if (schema.enum) {\n    let opt=\"\"\n    schema.enum.map(function(v){\n      opt = opt + `${v}, `\n    });\n    returnObj.type='enum';\n    returnObj.allowedValues = opt.slice(0,-2);\n  }\n  else if (schema.type) {\n    returnObj.type = schema.type;\n  }\n  \n  if (schema.type===\"array\" && schema.items){\n    let arraySchema = schema.items;\n    returnObj.arrayType = `${schema.type} of ${arraySchema.type}`;\n    returnObj.default = arraySchema.default==0 ? '0 ': (arraySchema.default ? arraySchema.default : '');\n    if (arraySchema.enum){\n      let opt=\"\"\n      arraySchema.enum.map(function(v){\n        opt = opt + `${v}, `\n      });\n      returnObj.allowedValues = opt.slice(0,-2);\n    }\n  }\n  else if (schema.type===\"integer\" || schema.type===\"number\"){\n    if (schema.minimum !== undefined && schema.maximum!==undefined){\n      returnObj.constrain = `${schema.exclusiveMinimum?\">\":\"\"}${schema.minimum}\\u00a0\\u22ef\\u00a0${schema.exclusiveMaximum?\"<\":\"\"}\\u00a0${schema.maximum}`\n    }\n    else if (schema.minimum!==undefined && schema.maximum===undefined){\n      returnObj.constrain = `${schema.exclusiveMinimum?\">\":\"≥\"}${schema.minimum}`\n    }\n    else if (schema.minimum===undefined && schema.maximum!==undefined){\n      returnObj.constrain = `${schema.exclusiveMaximum?\"<\":\"≤\"}${schema.maximum}`\n    }\n    if (schema.multipleOf!==undefined){\n      returnObj.constrain = `(multiple\\u00a0of\\u00a0${schema.multipleOf})`\n    }\n  }\n  else if (schema.type===\"string\"){\n    if (schema.minLength !==undefined  && schema.maxLength !==undefined ){\n      returnObj.constrain = `(${schema.minLength}\\u00a0to\\u00a0${schema.maxLength}\\u00a0chars)`;\n    }\n    else if (schema.minLength!==undefined  && schema.maxLength===undefined ){\n      returnObj.constrain = `(min:${schema.minLength}\\u00a0chars)`;\n    }\n    else if (schema.minLength===undefined  && schema.maxLength!==undefined ){\n      returnObj.constrain = `(max:${schema.maxLength}\\u00a0chars)`;\n    }\n  }\n\n  if (overrideAttributes){\n    if (overrideAttributes.readOnly){\n      returnObj.readOnly = '🆁\\u00a0';\n    }\n    if (overrideAttributes.writeOnly){\n      returnObj.writeOnly = '🆆\\u00a0';\n    }\n    if (overrideAttributes.deprecated){\n      returnObj.deprecated = '❌\\u00a0';\n    }\n  }\n\n  // ${returnObj.readOnly}${returnObj.writeOnly}${returnObj.deprecated}\\u00a0\n  let html = `${returnObj.type}`;\n  if (returnObj.allowedValues){\n    html = html + `:(${returnObj.allowedValues})`;\n  }\n  if (returnObj.readOnly){\n    html = html + `\\u00a0🆁`;\n  }\n  if (returnObj.writeOnly){\n    html = html + `\\u00a0🆆`;\n  }\n  if (returnObj.deprecated){\n    html = html + `\\u00a0❌`;\n  }\n\n  if (returnObj.constrain){\n    html = html + `\\u00a0${returnObj.constrain}`;\n  }\n  if (returnObj.format){\n    html = html + `\\u00a0${returnObj.format}`;\n  }\n  if (returnObj.pattern){\n    html = html + `\\u00a0${returnObj.pattern}`;\n  }\n  returnObj.html = html;\n  return returnObj;\n}\n\n/* For changing JSON-Schema to a Object Model that can be represnted in a tree-view */ \nfunction schemaToModel (schema, obj) {\n  if (schema==null){\n    return;\n  }\n  if (schema.type===\"object\" || schema.properties){\n    if (schema.description){\n      obj[\":description\"] = schema.description;\n    }\n    for( let key in schema.properties ){\n      obj[key] = schemaToModel(schema.properties[key],{});\n    }\n  }\n  else if (schema.type===\"array\" || schema.items ){\n    //let temp = Object.assign({}, schema.items );\n    obj = [schemaToModel(schema.items,{})  ]\n  }\n  else if (schema.allOf ){\n    if (schema.allOf.length===1){\n      if (!schema.allOf[0]){\n        return `string~|~${schema.description?schema.description:''}`;\n      }\n      else{\n        let overrideAttrib = { \n          \"readOnly\":schema.readOnly, \n          \"writeOnly\":schema.writeOnly, \n          \"deprecated\":schema.deprecated\n        };\n\n        return `${ getTypeInfo(schema.allOf[0],overrideAttrib).html }~|~${schema.description?schema.description:''}`\n      }\n    }\n\n    // If allOf is an array of multiple elements, then they are the keys of an object\n    let objWithAllProps = {};\n    schema.allOf.map(function(v){\n      if (v && v.properties){\n        let partialObj = schemaToModel(v,{});\n        Object.assign(objWithAllProps, partialObj);\n      }\n    });\n    obj = objWithAllProps;\n  }\n  else{\n    return `${getTypeInfo(schema).html}~|~${schema.description?schema.description:''}`;\n  }\n  return obj;\n}\n\n\n\n\n/* Create Example object */\nfunction generateExample(examples, example, schema, mimeType, outputType){\n    let finalExamples = [];\n    if (examples){\n        for (let eg in examples){\n            let egContent=\"\";  \n            if (mimeType.toLowerCase().includes(\"json\")){\n                if (outputType===\"text\"){\n                    egContent = JSON.stringify(examples[eg].value,undefined,2);\n                }\n                else{\n                    egContent = examples[eg].value;\n                }\n            }\n            else{\n                egContent = examples[eg].value;\n            }\n\n            finalExamples.push({\n                \"exampleType\" : mimeType,\n                \"exampleValue\": egContent\n            });\n        } \n    }\n    else if (example){\n        let egContent=\"\";  \n        if (mimeType.toLowerCase().includes(\"json\")){\n            if (outputType===\"text\"){\n                egContent = JSON.stringify(example,undefined,2);\n            }\n            else{\n                egContent = example;\n            }\n        }\n        else{\n            egContent = example;\n        }\n        finalExamples.push({\n            \"exampleType\" : mimeType,\n            \"exampleValue\": egContent\n        });\n    }\n    if (finalExamples.length==0 ){\n      // If schema examples are not provided then generate one from Schema (only JSON fomat)\n      if (schema){\n        //TODO: in case the mimeType is XML then parse it as XML\n        if (mimeType.toLowerCase().includes(\"json\") || mimeType.toLowerCase().includes(\"*/*\")){\n            let egJson = schemaToObj(schema,{}, {includeReadOnly:true, includeWriteOnly:true, deprecated:true});\n            finalExamples.push({\n                \"exampleType\" : mimeType,\n                \"exampleValue\": outputType===\"text\"?JSON.stringify(egJson,undefined,2):egJson\n            });\n        }\n        else{\n            finalExamples.push({\n                \"exampleType\" : mimeType,\n                \"exampleValue\": \"\" \n            });  \n        }\n      }\n      else{\n        // No Example or Schema provided   \n        finalExamples.push({\n            \"exampleType\" : mimeType,\n            \"exampleValue\": \"\" \n        });\n      }\n    }\n    return finalExamples;\n}\n\n/* For changing JSON-Schema to a Sample Object, as per the schema */ \nfunction schemaToObj (schema, obj, config={}) {\n    if (schema==null){\n        return;\n    }\n    if (schema.type===\"object\" || schema.properties){\n        for( let key in schema.properties ){\n            if ( schema.properties[key].deprecated ) {\n                continue;\n            }\n            if ( schema.properties[key].readOnly && !config.includeReadOnly ) {\n                continue;\n            }\n            if ( schema.properties[key].writeOnly && !config.includeWriteOnly ) {\n                continue;\n            }\n            //let temp = Object.assign({}, schema.properties[key] );\n            obj[key] = schemaToObj(schema.properties[key],{}, config);\n        }\n    }\n    else if (schema.type===\"array\" || schema.items ){\n        //let temp = Object.assign({}, schema.items );\n        obj = [schemaToObj(schema.items,{}, config)  ]\n    }\n    else if (schema.allOf ){\n\n        if (schema.allOf.length===1){\n            if (!schema.allOf[0]){\n                return \"string\";\n            }\n            else{\n                return getSampleValueByType(schema.allOf[0]);\n            }\n        }\n        let objWithAllProps = {};\n        schema.allOf.map(function(v){\n            if (v && v.type){\n                let partialObj = schemaToObj(v,{}, config);\n                Object.assign(objWithAllProps, partialObj);\n            }\n        });\n        obj = objWithAllProps;\n    }\n    else{\n        return getSampleValueByType(schema);\n    }\n    return obj;\n}\n\nfunction getSampleValueByType(schemaObj) {\n    if (schemaObj.example) {\n      return schemaObj.example;\n    }\n\n    if (Object.keys(schemaObj).length === 0) {\n        return null;\n    }\n\n    const typeValue = schemaObj.format || schemaObj.type || (schemaObj.enum ? 'enum' : null);\n    switch (typeValue) {\n        case 'int32':\n        case 'int64':\n        case 'integer':\n            return 0;\n        case 'float':\n        case 'double':\n        case 'number':\n            return 0.5;\n        case 'string':\n            return (schemaObj.enum ? schemaObj.enum[0] : (schemaObj.pattern ? schemaObj.pattern : \"string\"))\n        case 'byte':\n            return btoa('string');\n        case 'binary':\n            return 'binary';\n        case 'boolean':\n            return false;\n        case 'date':\n            return (new Date(0)).toISOString().split('T')[0];\n        case 'date-time':\n            return (new Date(0)).toISOString();\n        case 'dateTime':\n            return (new Date(0)).toISOString();\n        case 'password':\n            return 'password';\n        case 'enum':\n            return schemaObj.enum[0];\n        case 'uri':\n            return 'http://example.com';\n        case 'uuid':\n            return '3fa85f64-5717-4562-b3fc-2c963f66afa6';\n        case 'email':\n            return 'user@example.com';\n        case 'hostname':\n            return 'example.com';\n        case 'ipv4':\n            return '198.51.100.42';\n        case 'ipv6':\n            return '2001:0db8:5b96:0000:0000:426f:8e17:642a';\n        case 'circular':\n            return 'CIRCULAR REF';\n        default:\n            if (schemaObj.nullable) {\n                return null;\n            }\n            else {\n                console.warn('Unknown schema value', schemaObj);\n                return '?';\n            }\n    }\n  }\n\nfunction schemaToElTree(schema, obj, name) {\n    if (schema.type===\"object\" || schema.properties){\n        for( let key in schema.properties ){\n            let temp = Object.assign({}, schema.properties[key] );\n            if (schema.properties[key].type===\"object\" || schema.properties[key].properties){\n                obj.push({\n                    \"label\": {label:key , type:schema.properties[key].type, descr:schema.properties[key].description},\n                    \"children\": schemaToElTree(temp, [], key)\n                });\n            }\n            else if (schema.properties[key].type===\"array\" || schema.properties[key].items){\n                let typeOfArr=\"\";\n                if (schema.properties[key].items.properties){\n                    typeOfArr = \"array of objects\";\n                }\n                else {\n                    typeOfArr = \"array of \" + schema.properties[key].items.type;\n                }\n                obj.push({\n                    \"label\"   : {label:\"[ \"+key+\" ]\", type:typeOfArr, descr:schema.properties[key].description},\n                    \"children\": schemaToElTree(temp, [], key)\n                });\n            }\n            else{\n                let typeOfField=\"\";\n                if (schema.properties[key].enum){\n                    typeOfField = \"Enum: \" + schema.properties[key].enum.join(\" | \");\n                }\n                else{\n                    typeOfField = schema.properties[key].type;\n                }\n                obj.push({\n                    \"label\": {label:key, type:typeOfField, descr:schema.properties[key].description},\n                });\n            }\n        }\n    }\n    else if (schema.type===\"array\"){\n        if (schema.items.type===\"object\" || schema.items.properties){\n            let temp = Object.assign({}, schema.items);\n            return schemaToElTree(temp, []);\n        }\n        else if (schema.items.type===\"array\"){\n            obj.push({\n                \"label\": {label:\"[ \"+schema.items.type+\" ]\", type:schema.items.type, descr:schema.items.description }\n            });\n        }\n        else{\n            return;\n            /*\n            obj.push({\n                \"label\": {label:\"[\"+schema.items.type+\" ]\", type:schema.items.type, descr:schema.items.description}\n            });\n            */\n        }\n    }\n    else{\n        obj.push({\n            \"label\" : {label:name, type:schema.type, descr:schema.description}\n        });\n    }\n    return obj;\n}\n\nfunction getBaseUrlFromUrl(url){\n    let pathArray = url.split( '/' );\n    return pathArray[0] + \"//\" + pathArray[2];\n}\n\nfunction removeCircularReferences(level=0) {\n    const seen = new WeakSet();\n    return (key, value) => {\n      if (typeof value === \"object\" && value !== null) {\n        if (seen.has(value)) {\n          //let dupVal = Object.assign({}, value);\n          //return;\n          if (level > 0){\n              return {};\n          }\n          else{\n            let dupVal = JSON.parse(JSON.stringify(value, removeCircularReferences(level+1)));\n            seen.add(dupVal);\n            return dupVal;\n          }\n          \n        }\n        seen.add(value);\n      }\n      return value;\n    };\n  };\n\n\nexport { debounce, schemaToModel, schemaToObj, schemaToElTree, generateExample, getTypeInfo, getBaseUrlFromUrl, removeCircularReferences }","import { LitElement, html } from 'lit-element';\nimport JsonTree from '@/components/json-tree'; \nimport SchemaTree from '@/components/schema-tree';\nimport TagInput from '@/components/tag-input';   \nimport vars from '@/styles/vars';\nimport TableStyles from '@/styles/table-styles';\nimport FlexStyles from '@/styles/flex-styles';\nimport InputStyles from '@/styles/input-styles';\nimport FontStyles from '@/styles/font-styles';\nimport CommonStyles from '@/styles/common-styles';\nimport { schemaToModel, getTypeInfo,  generateExample, removeCircularReferences} from '@/utils/common-utils';\nimport marked from 'marked';\nimport {unsafeHTML} from 'lit-html/directives/unsafe-html.js';\nimport {repeat} from \"lit-html/lib/repeat\"\n\nexport default class ApiRequest extends LitElement {\n  \n  render() {\n    return html`\n    ${TableStyles}\n    ${InputStyles}\n    ${FontStyles}\n    ${FlexStyles}\n    ${CommonStyles}\n    <style>\n      .title{\n        font-family:var(--font-regular);\n        font-size:var(--title-font-size);\n        font-weight:bold;\n        margin-bottom:16px;\n      }\n      .param-name,\n      .param-type{\n        margin: 1px 0;\n        text-align: right;\n        line-height: 12px;\n      }\n      .param-name{\n        color: var(--fg); \n        font-family: var(--font-mono);\n      }\n      .param-type{\n        color: var(--light-fg); \n        font-family: var(--font-regular);\n      }\n      .param-constraint{\n        min-width:100px;\n      }\n      .param-constraint:empty{\n        display:none;\n      }\n      .top-gap{margin-top:24px;}\n      .tab-buttons{\n        height:30px;\n        border-bottom: 1px solid var(--light-border-color) ;\n        align-items: stretch;\n      }\n      .tab-btn{\n        border:none;\n        background-color:transparent;\n        cursor:pointer;\n        outline:none;\n        font-size:12px;\n        margin-right:16px;\n        padding:1px;\n      }\n      .tab-btn.active{\n        border-bottom: 3px solid var(--primary-color); \n        font-weight:bold;\n        color:var(--primary-color);\n      }\n\n      .tab-btn:hover{\n        color:var(--primary-color);\n      }\n      .tab-content{\n        margin:-1px 0 0 0;\n      }\n      .link{\n        font-size:12px;\n        text-decoration: underline;\n        color:var(--link-color);\n        font-family:var(--font-mono);\n        margin-bottom:2px;\n        \n      }\n      .textarea {\n        min-height:180px; \n        padding:5px;\n      }\n\n      .response-message.error{\n        color:var(--error-color);\n        font-weight:bold;\n        text-overflow: ellipsis;\n      }\n      .response-message.success{\n        color:var(--success-color);\n        font-weight:bold;\n        text-overflow: ellipsis;\n      }\n\n      @media only screen and (min-width: 768px){\n        .textarea {\n          padding:16px;\n        }\n      }\n\n    </style>\n    <div class=\"col regular-font request-panel\">\n      <div class=\"title\">REQUEST</div>\n      ${this.inputParametersTemplate('path')}\n      ${this.inputParametersTemplate('query')}\n      ${this.requestBodyTemplate()}\n      ${this.inputParametersTemplate('header')}\n      ${this.inputParametersTemplate('cookie')}\n      ${this.allowTry==='false'?'':html`${this.apiCallTemplate()}`}\n    </div>\n    `\n  }\n\n  constructor() {\n    super();\n    this.responseMessage = '';\n    this.responseStatus  = 'success';\n    this.responseHeaders = '';\n    this.responseText    = '';\n    this.responseUrl     = '';\n    this.curlSyntax      = '';\n\n  }\n\n  static get properties() {\n    return {\n      server        : { type: String },\n      apiKeyName    : { type: String, attribute: 'api-key-name' },\n      apiKeyValue   : { type: String, attribute: 'api-key-value' },\n      apiKeyLocation: { type: String, attribute: 'api-key-location' },\n      method        : { type: String },\n      path          : { type: String },\n      parameters    : { type: Array },\n      request_body  : { type: Object },\n      responseMessage: { type: String, attribute:false },\n      responseText   : { type: String, attribute:false },\n      responseHeaders: { type: String, attribute:false },\n      responseStatus : { type: String, attribute:false },\n      responseUrl    : { type: String, attribute:false },\n      allowTry        : { type: String, attribute: 'allow-try'  },\n\n    };\n  }\n\n\n  inputParametersTemplate(paramType){\n    let title =\"\";\n    let filteredParams= this.parameters? this.parameters.filter(param => param.in === paramType):[];\n    if (filteredParams.length == 0 ){\n      return \"\";\n    }\n    if (paramType==='path'){ title = \"PATH PARAMETERS\"}\n    else if (paramType==='query'){ title = \"QUERY-STRING PARAMETERS\"}\n    else if (paramType==='header'){ title = \"REQUEST HEADERS\"}\n    else if (paramType==='cookie'){ title = \"COOKIES\"}\n\n    \n    const tableRows = [];\n    for (const param of filteredParams)  {\n      let paramSchema = getTypeInfo(param.schema);\n      let inputVal='';\n      if (param.example=='0'){\n        inputVal='0'\n      }\n      else{\n        inputVal = paramSchema.default;\n      }\n\n      tableRows.push(html`\n      <tr> \n        <td style=\"min-width:100px;\">\n          <div class=\"param-name\">\n            ${param.required?html`<span style='color:orangered'>*</span>`:``}${param.name}\n          </div>\n          <div class=\"param-type\">\n          ${paramSchema.type==='array' ? `${paramSchema.arrayType}` \n          :`${paramSchema.type}${paramSchema.format?`\\u00a0(${paramSchema.format})`:''}`}\n          </div>\n        </td>  \n        <td style=\"min-width:100px;\">\n          ${paramSchema.type === 'array'?html`\n          <tag-input class=\"request-param\" style=\"width:100%;font-size:13px;background:var(--input-bg);line-height:13px;\" \n            data-ptype=\"${paramType}\" \n            data-pname=\"${param.name}\"\n            data-array=\"true\"\n            placeholder=\"add-multiple\\u23ce\"\n          ></tag-input>`\n          :html`<input type=\"text\" style=\"width:100%\" class=\"request-param\" \n            data-pname=\"${param.name}\" \n            data-ptype=\"${paramType}\"  \n            data-array=\"false\"\n            value=\"${inputVal}\">`\n          }\n          \n        </td>\n        <td>\n          <div class=\"param-constraint\">\n            ${paramSchema.constrain?html`${paramSchema.constrain}<br/>`:``}\n            ${paramSchema.allowedValues?html`${paramSchema.allowedValues}`:``}\n          </div>\n        </td>  \n      </tr>\n      ${param.description?html`\n        <tr>\n          <td style=\"border:none\">  \n        \n          </td>\n          <td colspan=\"2\" style=\"border:none; margin-top:0; padding:0 5px;\"> \n            <span class=\"m-markdown-small\">${unsafeHTML(marked(param.description))}</span>\n          </td>\n        </tr>`\n        :``}\n    `)\n    }\n\n    return html`\n    <div class=\"table-title top-gap\">${title}</div>\n    <div style=\"display:block; overflow-x:auto; max-width:100%;\">\n      <table class=\"m-table\" style=\"width:100%; word-break:break-word;;\">\n        ${tableRows}\n      </table>\n    </div>`\n  }\n\n  requestBodyTemplate(){\n    if(!this.request_body){\n      return '';\n    }\n    if (Object.keys(this.request_body).length == 0){\n      return '';\n    }\n    \n    let mimeReqCount=0;\n    let shortMimeTypes={};\n    let bodyDescrHtml = this.request_body.description? html`<div class=\"m-markdown\"> ${unsafeHTML(marked(this.request_body.description))}</div>`:'';\n    let textareaExampleHtml='';\n    let formDataHtml='';\n    const formDataTableRows = [];\n    let isFormDataPresent   = false;\n    let reqSchemaTree=\"\";\n\n    let content = this.request_body.content;\n    for(let mimeReq in content ) {\n      // do not change shortMimeTypes values, they are referenced in other places\n      if (mimeReq.includes('json')){shortMimeTypes[mimeReq]='json';}\n      else if (mimeReq.includes('xml')){shortMimeTypes[mimeReq]='xml';}\n      else if (mimeReq.includes('text/plain')){shortMimeTypes[mimeReq]='text';}\n      else if (mimeReq.includes('form-urlencoded')){shortMimeTypes[mimeReq]='form-urlencoded';}\n      else if (mimeReq.includes('multipart/form-data')){shortMimeTypes[mimeReq]='multipart-form-data';}\n\n      let mimeReqObj = content[mimeReq];\n      let reqExample=\"\";\n      if (mimeReq.includes('json') || mimeReq.includes('xml') || mimeReq.includes('text/plain')){\n        //Remove Circular references from RequestBody json-schema \n        try {\n          mimeReqObj.schema = JSON.parse(JSON.stringify(mimeReqObj.schema, removeCircularReferences()));\n        } \n        catch{\n          console.error(\"Unable to resolve circular refs in schema\", mimeReqObj.schema);\n          return;\n        }\n        reqSchemaTree = schemaToModel(mimeReqObj.schema,{});\n        reqExample    = generateExample(mimeReqObj.examples, mimeReqObj.example, mimeReqObj.schema, mimeReq, \"text\");\n        textareaExampleHtml = textareaExampleHtml +  `\n          <textarea \n            class=\"textarea mono request-body-param ${shortMimeTypes[mimeReq]}\" \n            data-ptype=\"${mimeReq}\" \n            style=\"display:${shortMimeTypes[mimeReq]==='json'?'block':'none'}; \n          \">${reqExample[0].exampleValue}</textarea>`\n      }\n      else if (mimeReq.includes('form') || mimeReq.includes('multipart-form')){\n        isFormDataPresent = true;\n        for (const fieldName in mimeReqObj.schema.properties)  {\n          const fieldSchema = mimeReqObj.schema.properties[fieldName];\n          const fieldType = fieldSchema.type;\n          const arrayType = fieldSchema.type==='array'?fieldSchema.items.type:'';\n          formDataTableRows.push(html`\n          <tr> \n            <td style=\"min-width:100px;\">\n              <div class=\"param-name\">${fieldName}</div>\n              <div class=\"param-type\">\n              ${fieldType==='array' ? `${fieldType} of ${arrayType}` \n              :`${fieldType} ${fieldSchema.format?`\\u00a0(${fieldSchema.format})`:''}`}\n              </div>\n            </td>  \n            <td style=\"min-width:100px;\">\n              ${fieldType === 'array'?html`\n              <tag-input class=\"request-form-param\" style=\"width:100%;font-size:13px;background:var(--input-bg);line-height:13px;\" \n                data-ptype=\"${fieldType}\" \n                data-pname=\"${fieldName}\"\n                data-array=\"true\"\n                placeholder=\"add-multiple\\u23ce\"\n              ></tag-input>`\n              :html`<input \n                type=\"${fieldSchema.format==='binary'?'file':'text'}\" \n                style=\"width:100%\" class=\"request-form-param\" \n                data-pname=\"${fieldName}\" \n                data-ptype=\"${fieldType}\"  \n                data-array=\"false\" />`\n              }\n              \n            </td>\n            <td>\n              <div class=\"param-constraint\"></div>\n            </td>  \n          </tr>\n          ${fieldSchema.description?html`\n            <tr>\n              <td style=\"border:none\"></td>\n              <td colspan=\"2\" style=\"border:none; margin-top:0; padding:0 5px;\"> \n                <span class=\"m-markdown-small\">${unsafeHTML(marked(fieldSchema.description))}</span>\n              </td>\n            </tr>`\n            :``}\n          `);\n        }\n\n        formDataHtml = html`\n        <form class=\"${shortMimeTypes[mimeReq]}\" onsubmit=\"event.preventDefault();\">\n          <table style=\"width: 100%\" class=\"m-table\">\n            ${formDataTableRows}\n          </table>\n        </form>`;  \n      }\n      mimeReqCount++;\n    }\n\n    return html`\n      <div class=\"table-title top-gap ${isFormDataPresent?'form_data':'body_data'} \"> ${isFormDataPresent?'FORM':'BODY'} DATA ${this.request_body.required?'(required)':''} </div>\n      ${bodyDescrHtml}\n      ${isFormDataPresent?html`${formDataHtml}`\n        :html`\n        <div class=\"tab-panel col\" style=\"border-width:0; min-height:200px\">\n          <div id=\"tab_buttons\" class=\"tab-buttons row\" @click=\"${this.activateTab}\">\n            <button class=\"tab-btn active\" content_id=\"tab_example\">EXAMPLE </button>\n            <button class=\"tab-btn\" content_id=\"tab_model\">MODEL</button>\n            <div style=\"flex:1\"> </div>\n            <div style=\"color:var(--light-fg); align-self:center; font-size:12px; margin-top:8px;\">\n              ${mimeReqCount==1?`\n                ${Object.keys(shortMimeTypes)[0]}\n              `:html`\n                ${Object.keys(shortMimeTypes).map(k => html`\n                  ${shortMimeTypes[k]==='json'?html`\n                    <input type='radio' name='request_body_type' value='${shortMimeTypes[k]}' @change=\"${this.onMimeTypeChange}\" checked style='margin:0 0 0 8px'/>\n                  `\n                  :html`\n                    <input type='radio' name='request_body_type' value='${shortMimeTypes[k]}' @change=\"${this.onMimeTypeChange}\" style='margin:0 0 0 8px'/>\n                  `}\n                  ${shortMimeTypes[k]}` \n                )}\n              `}\n            </div>\n          </div>\n          <div id=\"tab_example\" class=\"tab-content col\" style=\"flex:1; \">\n            ${unsafeHTML(textareaExampleHtml)}\n          </div>\n          <div id=\"tab_model\" class=\"tab-content col\" style=\"flex:1;display:none\">\n            <schema-tree class=\"border\" style=\"padding:16px;\" .data=\"${reqSchemaTree}\"></schema-tree>\n          </div>\n        </div>`\n      }`\n\n\n  }\n\n  apiCallTemplate(){\n    return html`\n    <div style=\"display:flex; align-items: center; margin:16px 0; font-size:12px;\">\n      <div style=\"display:flex; flex-direction:column; margin:0; width:calc(100% - 60px);\">\n        <div style=\"display:flex;flex-direction:row;overflow:hidden;\"> <div style=\"font-weight:bold;\">API_Server: </div> \n          ${this.server?html`${this.server}`\n          : html`<div style=\"font-weight:bold;color:var(--error-color)\">Not Set</div>`}\n        </div>\n        <div style=\"display:flex;flex-direction:row;overflow:hidden;line-height:16px;color:var(--fg2)\"> \n          ${this.apiKeyValue && this.apiKeyName ? html`\n            <div style=\"font-weight:bold;color:var(--success-color)\">Authentication: &nbsp; </div>\n            send <div style=\"font-family:var(--font-mono); color:var(--fg)\"> '${this.apiKeyName}' </div>\n            in<div style=\"font-family:var(--font-mono); color:var(--fg)\"> '${this.apiKeyLocation}' </div>\n            with value<div style=\"font-family:var(--font-mono); color:var(--fg)\"> '${this.apiKeyValue.substring(0,3)+\"***\" }' </div>`\n          :html`<div style=\"color:var(--light-fg)\">No Authentication Token provided</div>`}\n        </div>\n      </div>\n      <button class=\"m-btn\" style=\"padding: 6px 0px;width:60px\" @click=\"${this.onTryClick}\">TRY</button>\n    </div>\n    ${this.responseMessage===''?'':html`\n    <div class=\"row\" style=\"font-size:12px; margin:5px 0\">\n      <div class=\"response-message ${this.responseStatus}\">Response Status: ${this.responseMessage}</div>\n      <div style=\"flex:1\"></div>\n      <button class=\"m-btn\" style=\"padding: 6px 0px;width:60px\" @click=\"${this.clearResponseData}\">CLEAR</button>\n\n    </div>\n    <div class=\"tab-panel col\" style=\"border-width:0; min-height:200px\">\n      <div id=\"tab_buttons\" class=\"tab-buttons row\" @click=\"${this.activateTab}\">\n        <button class=\"tab-btn active\" content_id=\"tab_response_text\"> RESPONSE TEXT</button>\n        <button class=\"tab-btn\" content_id=\"tab_response_headers\"> RESPONSE HEADERS</button>\n        <button class=\"tab-btn\" content_id=\"tab_curl\">CURL</button>\n      </div>\n      <div id=\"tab_response_text\" class=\"tab-content col\" style=\"flex:1; \">\n        <textarea class=\"mono\" style=\"min-height:180px; padding:16px;\">${this.responseText}</textarea>\n      </div>\n      <div id=\"tab_response_headers\" class=\"tab-content col\" style=\"flex:1;display:none\">\n        <textarea class=\"mono\" style=\"min-height:180px; padding:16px; white-space:nowrap;\">${this.responseHeaders}</textarea>\n      </div>\n      <div id=\"tab_curl\" class=\"tab-content col\" style=\"flex:1;display:none\">\n        <code style=\"min-height:180px; padding:16px;font-size:12px; border:1px solid var(--input-border-color);overflow: scroll;word-break: break-word;\">${this.curlSyntax}</code>\n      </div>\n    </div>`}\n    `\n  }\n\n  activateTab(e){\n    if (e.target.classList.contains(\"active\")  || e.target.classList.contains(\"tab-btn\")===false){\n      return;\n    }\n    let activeTabBtn  = e.currentTarget.parentNode.querySelector('.tab-btn.active');\n    let clickedTabBtn = e.target;\n    activeTabBtn.classList.remove(\"active\");\n    e.target.classList.add(\"active\");\n    let showContentEl = this.shadowRoot.getElementById(clickedTabBtn.attributes.content_id.value);\n    let allContentEls = e.currentTarget.parentNode.querySelectorAll('.tab-content');\n    if (showContentEl){\n      showContentEl.style.display=\"flex\";\n      allContentEls.forEach(function(v){\n        if (v.attributes.id.value !== clickedTabBtn.attributes.content_id.value){\n          v.style.display=\"none\";\n        }\n      })\n    }\n  }\n\n\n  onMimeTypeChange(e){\n    let textareaEls = e.target.closest('.tab-panel').querySelectorAll(`textarea.request-body-param`);\n    [...textareaEls].map(function(el){\n      el.style.display = el.classList.contains(e.target.value)?\"block\":\"none\";\n    });\n  }\n\n  onTryClick(e){\n    let me = this;\n    let curl=\"\", curlHeaders=\"\", curlData=\"\", curlForm=\"\";\n    let requestPanelEl = e.target.closest(\".request-panel\");\n    let pathParamEls   = [...requestPanelEl.querySelectorAll(\".request-param[data-ptype='path']\")];\n    let queryParamEls  = [...requestPanelEl.querySelectorAll(\".request-param[data-ptype='query']\")];\n    let headerParamEls = [...requestPanelEl.querySelectorAll(\".request-param[data-ptype='header']\")];\n    let formParamEls   = [...requestPanelEl.querySelectorAll(\".request-form-param\")];\n    let bodyParamEls   = [...requestPanelEl.querySelectorAll(\".request-body-param\")];\n\n    let fetchUrl = me.path;\n    let fetchOptions={\n      'mode'   : \"cors\",\n      'method' : this.method.toUpperCase(),\n      'headers': {},\n    }\n    //Generate URL using Path Params\n    pathParamEls.map(function(el){\n      fetchUrl = fetchUrl.replace(\"{\"+el.dataset.pname+\"}\", el.value);\n    });\n\n    //Submit Query Params\n    if (queryParamEls.length>0){\n      let queryParam = new URLSearchParams(\"\");\n      queryParamEls.map(function(el){\n        if (el.dataset.array==='false'){\n          if (el.value !== ''){\n            queryParam.append(el.dataset.pname, el.value);\n          }\n        }\n        else {\n          let vals = el.getValues();\n          for(let v of vals){\n            queryParam.append(el.dataset.pname, v);\n          }\n        }\n      })\n      fetchUrl = `${fetchUrl}?${queryParam.toString()}`;\n    }\n    \n    // Add authentication Query-Param if provided \n    if (this.apiKeyValue && this.apiKeyName && this.apiKeyLocation==='query'){\n      fetchUrl = `${fetchUrl}&${this.apiKeyName}=${this.apiKeyValue}`;\n    }\n\n    //Final URL for API call\n    fetchUrl = `${this.server.replace(/\\/$/, \"\")}${fetchUrl}`;\n    curl=`curl -X ${this.method.toUpperCase()} \"${fetchUrl}\" `;\n\n    //Submit Header Params\n    headerParamEls.map(function(el){\n      if (el.value){\n        fetchOptions.headers[el.dataset.pname] =  el.value;\n        curlHeaders = curlHeaders + ` -H \"${fetchOptions.headers[el.dataset.pname]}: ${el.value}\"`;\n      }\n    });\n    // Add Authentication Header if provided\n    if (this.apiKeyValue && this.apiKeyName && this.apiKeyLocation==='header'){\n      fetchOptions.headers[this.apiKeyName] = this.apiKeyValue;\n      curlHeaders = curlHeaders + ` -H \"${this.apiKeyName}: ${this.apiKeyValue}\"`;\n    }\n\n    //Submit Form Params (url-encoded or form-data)\n    if (formParamEls.length>=1){\n      let formEl = requestPanelEl.querySelector(\"form\");\n      const formUrlParams = new URLSearchParams();\n      const formDataParams = new FormData();\n      formParamEls.map(function(el){\n        if (el.dataset.array==='false'){\n          if (el.type !== 'file'){\n            if (el.value !== ''){\n              formUrlParams.append(el.dataset.pname, el.value);\n              formDataParams.append(el.dataset.pname, el.value);\n              curlForm = curlForm + ` -F \"${el.dataset.pname}=${el.value}\"`;\n            }\n          }\n          else {\n            if (el.files[0]){\n              formUrlParams.append(el.dataset.pname, el.files[0]);\n              formDataParams.append(el.dataset.pname, el.files[0]);\n              curlForm = curlForm + ` -F \"${el.dataset.pname}=@${el.value}\"`;\n            }\n          }\n        }\n        else{\n          let vals = el.getValues();\n          for(let v of vals){\n            formUrlParams.append(el.dataset.pname, v);\n            formDataParams.append(el.dataset.pname, v);\n            curlForm = curlForm + ` -F \"${el.dataset.pname}=${v}\"`;\n          }\n        }\n      });\n\n      if (formEl.classList.contains(\"form-urlencoded\")){\n        fetchOptions.headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=utf-8'\n        curlHeaders = curlHeaders + ` -H \"Content-Type: application/x-www-form-urlencoded\"`;\n        fetchOptions.body = formUrlParams;\n      }\n      else {\n        //fetchOptions.headers['Content-Type'] = 'multipart/form-data' // Dont set content type for fetch, coz the browser must auto-generate boundry value too \n        curlHeaders = curlHeaders + ` -H \"Content-Type: multipart/form-data\"`;\n        fetchOptions.body = formDataParams;\n      }\n    }\n\n    //Submit Body Params (json/xml/text)\n    if (bodyParamEls.length>=1){\n      if (bodyParamEls.length===1){\n        fetchOptions.headers['Content-Type'] = bodyParamEls[0].dataset.ptype;\n        curlHeaders = curlHeaders + ` -H \"Content-Type: ${bodyParamEls[0].dataset.ptype}\"`;\n        fetchOptions.body=bodyParamEls[0].value;\n        curlData = ` -d ${JSON.stringify(bodyParamEls[0].value.replace(/(\\r\\n|\\n|\\r)/gm,\"\") )}`;\n      }\n      else{\n        let mimeTypeRadioEl = e.target.closest(\".request-panel\").querySelector(\"input[name='request_body_type']:checked\");\n        let selectedBody = mimeTypeRadioEl===null?'json':mimeTypeRadioEl.value;\n        let bodyData='';\n        if (selectedBody === 'json'){\n          bodyData = requestPanelEl.querySelector(\".request-body-param.json\").value;\n          fetchOptions.headers['Content-Type'] = 'application/json; charset=utf-8';\n          curlHeaders = curlHeaders + ` -H \"Content-Type: application/json\"`;\n        }\n        else if (selectedBody === 'xml'){\n          bodyData = requestPanelEl.querySelector(\".request-body-param.xml\").value;\n          fetchOptions.headers['Content-Type'] = 'application/xml; charset=utf-8';\n          curlHeaders = curlHeaders + ` -H \"Content-Type: application/xml\"`;\n        }\n        else if (selectedBody === 'text'){\n          bodyData = requestPanelEl.querySelector(\".request-body-param.text\").value;\n          fetchOptions.headers['Content-Type'] = 'text/plain; charset=utf-8';\n          curlHeaders = curlHeaders + ` -H \"Content-Type: text/plain\"`;\n        }\n        fetchOptions.body=bodyData;\n        curlData = ` -d ${JSON.stringify(bodyData.replace(/(\\r\\n|\\n|\\r)/gm,\"\"))}`;\n      }\n    }\n\n    me.responseUrl     = '';\n    me.responseHeaders = '';\n    me.responseText    = '';\n    me.curlSyntax      = '';\n    me.responseStatus  = 'success';\n    me.responseMessage = ''\n\n    fetch(fetchUrl,fetchOptions).then(function(resp){\n      me.curlSyntax = `${curl} ${curlHeaders} ${curlData} ${curlForm}`;\n      me.responseStatus  = resp.ok ? 'success':'error';\n      me.responseMessage = `${resp.statusText}:${resp.status}`;\n      me.responseUrl     = resp.url;\n      resp.headers.forEach(function(hdrVal, hdr) {\n        me.responseHeaders = me.responseHeaders + `${hdr.trim()}: ${hdrVal}`+\"\\n\";\n      });\n      let contentType = resp.headers.get(\"content-type\");\n      if(contentType && contentType.includes(\"json\")) {\n        resp.json().then(function(respObj) {\n          me.responseText = JSON.stringify(respObj,null,2);\n        })\n      }\n      else{\n        resp.text().then(function(respText) {\n          me.responseText = respText;\n        })\n      }\n    })\n    .catch(function(err){\n      me.responseMessage = err.message + \" (CORS or Network Issue)\";\n    });\n  }\n\n  clearResponseData(){\n    this.responseUrl     = '';\n    this.responseHeaders = '';\n    this.responseText    = '';\n    this.responseStatus  = 'success';\n    this.responseMessage = ''\n  }\n\n}\n// Register the element with the browser\ncustomElements.define('api-request', ApiRequest);\n","import { LitElement, html } from 'lit-element'; \nimport {schemaToModel, schemaToObj, generateExample, removeCircularReferences} from '@/utils/common-utils';\nimport vars from '@/styles/vars';\nimport FontStyles from '@/styles/font-styles';\nimport FlexStyles from '@/styles/flex-styles';\nimport TableStyles from '@/styles/table-styles';\nimport InputStyles from '@/styles/input-styles';\nimport SchemaTree from '@/components/schema-tree'; \n\nexport default class ApiResponse extends LitElement {\n  render() {\n    return html`\n    ${FontStyles}\n    ${FlexStyles}\n    ${TableStyles}\n    ${InputStyles}\n    <style>\n      .title{\n        font-family:var(--font-regular);\n        font-size:var(--title-font-size);\n        font-weight:bold;\n        margin-bottom:8px;\n      }\n      .resp-head{\n        vertical-align: middle;\n        padding:16px 0 8px;\n      }\n      .resp-head.divider{border-top: 1px solid var(--border-color);}\n      .resp-status{ \n        font-weight:bold;\n      }\n      .top-gap{margin-top:16px;}\n      .tab-buttons{\n        height:30px;\n        border-bottom: 1px solid var(--light-border-color) ;\n        align-items: stretch;\n      }\n      .tab-btn{\n        color:var(--fg);\n        border:none;\n        background-color:transparent;\n        cursor:pointer;\n        padding:1px;\n        outline:none;\n        font-size:12px;\n        margin-right:16px;\n        padding:1px;\n      }\n      .tab-btn.active{\n        border-bottom: 3px solid var(--primary-color);\n        font-weight:bold;\n        color:var(--primary-color);\n      }\n\n      .tab-btn:hover{\n        color:var(--primary-color);\n      }\n      .tab-content{\n        margin:-1px 0 0 0;\n      }\n      .tree{\n        padding:16px 2px;\n      }\n      @media only screen and (min-width: 768px){\n        .tree {\n          padding:16px;\n        }\n      }\n\n    </style>\n    <div class=\"col regular-font\">\n    <div class=\"title\">RESPONSE</div>\n\n\n\n\n    ${this.responseTemplate()}\n    `\n\n  }\n\n  /*\n    ${this.mimeResponsesForEachStatus.map(\n      responsesByStatus => html`<end-point .path=${path}> </end-point>`\n    )}`\n    mimeResponsesForEachStatus\n    ${this.responseTemplate()}\n    <!-- schema-tree .data=\"${this.data}\"></schema-tree -->\n    </div>\n    `\n*/\n  static get properties() {\n    return {\n      responses:{type: Object}\n    };\n  }\n\n  responseTemplate(){\n\n    let selectedMimeValueForEachStatus={};\n    let headersForEachRespStatus={};\n    let selectedMimeValue=\"\";\n    let mimeResponsesForEachStatus={};\n    let mimeRespCountForEachStatus=0;\n\n    for(let statusCode in this.responses) {\n      let allMimeResp={};\n      let mimeRespCount=0;\n      for(let mimeResp in this.responses[statusCode].content ) {\n        let mimeRespObj = this.responses[statusCode].content[mimeResp];\n        //Remove Circular references from Response schema \n        try {\n            //mimeRespObj.schema = JSON.parse(JSON.stringify(mimeRespObj.schema, removeCircularReferences(0)));\n            if (mimeRespObj.schema){\n              mimeRespObj.schema = JSON.parse(JSON.stringify(mimeRespObj.schema, removeCircularReferences(0)));\n            }\n        }\n        catch{\n            console.error(\"Unable to resolve circular refs in schema\", mimeRespObj.schema);\n            return;\n        }\n        \n        // Generate Schema\n        let schemaTree = schemaToModel(mimeRespObj.schema,{});\n        \n        // Generate Example\n        let respExample = generateExample(mimeRespObj.examples, mimeRespObj.example, mimeRespObj.schema, mimeResp, \"json\");\n        allMimeResp[mimeResp] = {\n          \"description\":this.responses[statusCode].description,\n          \"examples\"  : respExample,\n          \"schemaTree\": schemaTree,\n        }\n        console.log(mimeResp);\n        if (mimeResp.includes(\"json\")){\n          selectedMimeValue = mimeResp;\n        }\n        selectedMimeValueForEachStatus[statusCode]= mimeResp;\n        mimeRespCount++;\n      }\n\n      // Headers for each response status\n      let tempHeaders=[];\n      for (let key in this.responses[statusCode].headers){\n        tempHeaders.push ( { \"name\":key, ...this.responses[statusCode].headers[key]} );\n      }\n      headersForEachRespStatus[statusCode]   = tempHeaders;\n      mimeResponsesForEachStatus[statusCode] = allMimeResp;\n    }\n\n\n    return html`${Object.keys(this.responses).map(\n      (status, index)  => html`\n      <div class=\"resp-head ${index===0?'top-gap':'divider'}\">\n        <span class=\"resp-status\">${status}:</span> \n        <span class=\"resp-descr\">${this.responses[status].description}</span> \n      </div>      \n      ${Object.keys(mimeResponsesForEachStatus[status]).map(\n        mimeType => html`\n          <div class=\"tab-panel col\" style=\"border-width:0; min-height:200px\">\n            <div id=\"${status}_${mimeType}_tab-buttons\" @click=\"${this.activateTab}\" class=\"tab-buttons row\" >\n              <button class=\"tab-btn active\" content_id=\"${status}_${mimeType}_example\">EXAMPLE</button>\n              <button class=\"tab-btn\" content_id=\"${status}_${mimeType}_model\">MODEL</button>\n              <div style=\"flex:1\"></div>\n              <div style=\"align-self:center;font-size:12px;\"> ${mimeType} </div>\n            </div>\n            <div id=\"${status}_${mimeType}_example\" class=\"tab-content col\" style=\"flex:1; \">\n              <json-tree class=\"border tree\" .data=\"${mimeResponsesForEachStatus[status][mimeType].examples[0].exampleValue}\"></json-tree>\n            </div>\n            <div id=\"${status}_${mimeType}_model\" class=\"tab-content col\" style=\"flex:1;display:none\">\n              <schema-tree class=\"border tree\" .data=\"${mimeResponsesForEachStatus[status][mimeType].schemaTree}\"></schema-tree>\n            </div>\n          </div>`\n      )}`\n    )}`\n    \n  }\n\n  activateTab(e){\n    if (e.target.classList.contains(\"active\")  || e.target.classList.contains(\"tab-btn\")===false){\n      return;\n    }\n    let activeTabBtn  = e.currentTarget.parentNode.querySelector(\".tab-btn.active\");\n    activeTabBtn.classList.remove(\"active\");\n    e.target.classList.add(\"active\");\n    let showContentElsId = e.target.attributes.content_id.value;\n    let allContentEls = e.currentTarget.parentNode.querySelectorAll('.tab-content');\n    if (showContentElsId){\n      allContentEls.forEach(function(v){\n        v.style.display =  v.attributes.id.value === showContentElsId?\"flex\":\"none\";\n      })\n    }\n  }\n\n\n}\n// Register the element with the browser\ncustomElements.define('api-response', ApiResponse);\n","import { LitElement, html, css } from 'lit-element'; \nimport vars from '@/styles/vars';\nimport {unsafeHTML} from 'lit-html/directives/unsafe-html.js';\nimport marked from 'marked';\nimport ApiRequest from '@/components/api-request'; \nimport ApiResponse from '@/components/api-response'; \nimport FontStyles from '@/styles/font-styles';\n\nexport default class EndPoint extends LitElement {\n  render() {\n    return html`\n     ${FontStyles}\n    <style>\n\n    </style>\n\n    ${window.innerWidth >= 768 ? html`${this.layout==='row' ?\n      html`\n      <style>\n        .request{ border-width: 0 1px 0 0; }\n      </style>`:\n      html`\n        <style>\n        .request{ border-width: 0 0 1px 0; }\n        </style>`\n      }`:''\n    }\n\n    <div  class='m-endpoint regular-font ${this.path.method} ${this.path.expanded?'expanded':'collapsed'}'>\n      <!-- Endpoint Head -->\n      <div @click=\"${this.toggleExpand}\" class='head ${this.path.method} ${this.path.expanded?'expanded':'collapsed'}'>\n        <div class=\"method ${this.path.method}\" > ${this.path.method} </div> \n        <div class=\"path ${this.path.deprecated?'deprecated':''}\"> ${this.path.path} </div>\n        ${this.path.deprecated?html`<span style=\"font-size:12px; text-transform:uppercase; font-weight:bold; color:orangered; margin:2px 0 0 5px;\"> deprecated </span>`:''}\n        <div class=\"only-large-screen\" style=\"min-width:60px; flex:1\"></div>\n        <div class=\"descr\"> ${this.path.summary} </div>\n      </div>\n      \n      <!-- Endpoint Body -->\n      ${this.path.expanded?html`\n      <div class='body ${this.path.method}'>\n        ${this.path.summary || this.path.description?html`\n          <div class=\"summary\">\n            <div class=\"title\">${this.path.summary}</div>\n            ${this.path.summary !== this.path.description?html`\n              <div class=\"m-markdown\"> \n                ${unsafeHTML(marked(this.path.description?this.path.description:''))}\n              </div>`\n            :''}  \n          </div>`\n        :``}\n        <div class='req-resp-container'> \n          <api-request  class=\"request\"  \n            server=\"${this.server}\" \n            method=\"${this.path.method}\", \n            path=\"${this.path.path}\" \n            api-key-name=\"${this.apiKeyName}\" \n            api-key-value=\"${this.apiKeyValue}\" \n            api-key-location=\"${this.apiKeyLocation}\" \n            .parameters=\"${this.path.parameters}\" \n            .request_body=\"${this.path.requestBody}\"\n            allow-try=\"${this.allowTry}\"\n          ></api-request>\n          <api-response class=\"response\" .responses=\"${this.path.responses}\"></api-response>\n        </div>\n      </div>`\n    :``}\n\n    </div>`\n  }\n  \n  static get styles() {\n    return [ css`\n    .only-large-screen {\n      display:none;\n    }\n\n    .head .path{\n      display: flex;\n      font-family:var(--font-mono);\n      font-size: 12px;\n      align-items: center;\n      overflow-wrap: break-word;\n      word-break: break-all;\n    }\n\n    .head .descr{\n      font-size: 12px;\n      color:var(--light-fg);\n      font-weight:400;\n      align-items: center;\n      overflow-wrap: break-word;\n      word-break: break-all;\n      display:none;\n    }\n\n    .m-endpoint.expanded{margin-bottom:16px; }\n    .m-endpoint > .head{\n      border-width:1px 1px 1px 5px;\n      border-style:solid;\n      border-color:transparent;\n      border-top-color:var(--light-border-color);\n      display:flex;\n      padding:6px 16px;\n      align-items: center;\n      cursor: pointer;\n    }\n    .m-endpoint > .head.put:hover,\n    .m-endpoint > .head.put.expanded{\n      border-color:var(--put-color); \n      background-color:var(--light-put-color); \n    }\n    .m-endpoint > .head.post:hover,\n    .m-endpoint > .head.post.expanded{\n      border-color:var(--post-color); \n      background-color:var(--light-post-color); \n    }\n    .m-endpoint > .head.get:hover,\n    .m-endpoint > .head.get.expanded{\n      border-color:var(--get-color); \n      background-color:var(--light-get-color); \n    }\n    .m-endpoint > .head.delete:hover,\n    .m-endpoint > .head.delete.expanded{\n      border-color:var(--delete-color); \n      background-color:var(--light-delete-color); \n    }\n    .m-endpoint > .head.patch:hover,\n    .m-endpoint > .head.patch.expanded{\n      border-color:var(--patch-color); \n      background-color:var(--light-patch-color); \n    }\n    .m-endpoint .body {\n      flex-wrap:wrap;\n      padding:16px 0px 0 0px;\n      border-width:0px 1px 1px 5px;\n      border-style:solid;\n      box-shadow: 0px 4px 3px -3px rgba(0, 0, 0, 0.15);\n    }\n    .m-endpoint .body.delete{ border-color:var(--delete-color); }\n    .m-endpoint .body.patch{ border-color:var(--patch-color); }\n    .m-endpoint .body.put{ border-color:var(--put-color); }\n    .m-endpoint .body.post{border-color:var(--post-color);}\n    .m-endpoint .body.get{ border-color:var(--get-color); }\n\n    .head .deprecated{\n      text-decoration: line-through red;\n    }\n\n    .summary{\n      padding:8px 8px;\n    }\n    .summary .title{\n      font-size:18px;\n      margin-bottom: 6px;\n      word-break: break-all;\n    }\n\n    .method{\n      padding:2px 5px;\n      vertical-align: middle;\n      height: 20px;\n      line-height: 20px;\n      min-width: 48px;\n      border-radius: 2px;\n      display:inline-block;\n      font-size:12px;\n      text-align: center;\n      font-weight: bold;\n      text-transform:uppercase;\n      margin-right:5px;\n    }\n    .method.delete{ border: 2px solid var(--delete-color);}\n    .method.patch{ border: 2px solid var(--patch-color); }\n    .method.put{ border: 2px solid var(--put-color); }\n    .method.post{ border: 2px solid var(--post-color); }\n    .method.get{ border: 2px solid var(--get-color); }\n\n    .req-resp-container{\n      display: flex;\n      margin-top:16px;\n      align-items: stretch;\n      flex-wrap: wrap;\n      flex-direction: column;\n      border-top:1px solid var(--light-border-color);\n    }\n    .request,\n    .response{\n      flex:1; \n      min-height:100px;\n      padding:16px 8px;\n      overflow:hidden;\n    }\n    .request{\n      border-width:0 0 1px 0;\n      border-style:dashed;\n    }\n    .patch .request{ \n      border-color:var(--patch-color); \n    }\n    .put .request{ \n      border-color:var(--put-color); \n    }\n    .post .request{ \n      border-color:var(--post-color); \n    }\n    .get .request{ \n      border-color:var(--get-color); \n    }\n    .delete .request{ \n      border-color:var(--delete-color); \n    }\n\n\n    @media only screen and (min-width: 768px){\n      .head .path{\n        font-size: 14px;\n        min-width:400px;\n      }\n      .head .descr{\n        display: flex;\n      }\n      .only-large-screen{\n        display:block;\n      }\n      .req-resp-container{\n        flex-direction: var(--layout, row);\n      }\n      .request{\n        border-width:0 1px 0 0;\n        padding:16px 24px;\n      }\n      .response{\n        padding:16px 24px;\n      } \n      .summary{\n        padding:8px 24px;\n      }\n    }\n  `];\n  }\n\n  static get properties() {\n    return {\n      server        : { type:String },\n      apiKeyName    : { type: String, attribute: 'api-key-name' },\n      apiKeyValue   : { type: String, attribute: 'api-key-value' },\n      apiKeyLocation: { type: String, attribute: 'api-key-location' },\n      layout  : { type:String },\n      path    : { type:Object },\n      allowTry: { type: String, attribute: 'allow-try' },\n    };\n  }\n\n  toggleExpand(){\n    this.path.expanded = !this.path.expanded;\n    this.requestUpdate();\n  }\n}\n// Register the element with the browser\ncustomElements.define('end-point', EndPoint);\n","import { LitElement, html } from 'lit-element'; \nimport {unsafeHTML} from 'lit-html/directives/unsafe-html.js';\nimport marked from 'marked';\n\nimport FontStyles from '@/styles/font-styles';\nimport TableStyles from '@/styles/table-styles';\nimport InputStyles from '@/styles/input-styles';\n\n\nexport default class SecuritySchemes extends LitElement {\n  render() {\n    return html`\n    ${FontStyles}\n    ${TableStyles}\n    ${InputStyles}\n    <style>\n      .url{\n        display: inline-flex;\n        color: #999;\n        max-width: 220px;\n        overflow-wrap: break-word;\n        word-break: break-all;\n      }\n    </style>\n    <div>AUTHENTICATION</div>\n    <table style=\"width:auto\" class=\"m-table\">\n      <tr>\n        <th >Type </th>  \n        <th> Authentication Procedure </th>  \n      </tr>\n      \n        ${Object.keys(this.schemes).map(s => html`\n          <tr>  \n          <td>\n            <div style=\"font-weight:bold\">${this.schemes[s].type}: ${this.schemes[s].scheme}</div>\n            ${this.schemes[s].description?html`\n              <div class=\"m-markdown\"> \n                ${unsafeHTML(marked(this.schemes[s].description))}\n              </div>`\n            :''}\n          </td>\n          <td>\n            ${this.schemes[s].type==='apiKey'?html`\n              Send <code>'${this.schemes[s].name}'</code> in <code>'${this.schemes[s].in}'</code> with the given value\n              <div class=\"api-key\" data-type=\"${this.schemes[s].type}\" data-in=\"${this.schemes[s].in}\" data-name=\"${this.schemes[s].name}\" style=\"margin:5px 0\">\n                <input type=\"text\" name=\"token\" style=\"width:202px;\" placeholder=\"api-token\" >\n                <button \n                  class=\"m-btn\" \n                  data-action=\"${this.keyValue?'CLEAR':'SET'}\" \n                  @click=\"${this.dispatchChange}\"\n                >${this.keyValue?'CLEAR':'SET'}</button>\n              </div>\n            `:``}\n            ${this.schemes[s].type==='http' && this.schemes[s].scheme==='basic'?html`\n              Send <code>'Authorization'</code> in header which will contains the word  <code>'Basic'</code> followed by a space and a base64-encoded string username:password.\n              <div class=\"api-key \" data-type=\"${this.schemes[s].type}\" data-scheme=\"${this.schemes[s].scheme}\" data-in=\"header\" data-name=\"Authorization\" style=\"margin:15px 0\">\n                <input type=\"text\" name=\"username\" style=\"width:100px;\" placeholder=\"username\">\n                <input type=\"text\" name=\"password\" style=\"width:100px;\" placeholder=\"password\">\n                <button \n                  class=\"m-btn\" \n                  data-action=\"${this.keyValue?'CLEAR':'SET'}\" \n                  @click=\"${this.dispatchChange}\"\n                >${this.keyValue?'CLEAR':'SET'}</button>\n              </div>\n            `:``}\n            ${this.schemes[s].type==='http' && this.schemes[s].scheme==='bearer'?html`\n              Send <code>'Authorization'</code> in header which will contains the word  <code>'Bearer'</code> followed by a space and a Token String.\n              <div class=\"api-key\" data-type=\"${this.schemes[s].type}\" data-scheme=\"${this.schemes[s].scheme}\" data-in=\"header\" data-name=\"Authorization\" style=\"margin:15px 0\">\n                <input type=\"text\" name=\"token\" style=\"width:202px;\" placeholder=\"api-token\">\n                <button \n                  class=\"m-btn\" \n                  data-action=\"${this.keyValue?'CLEAR':'SET'}\" \n                  @click=\"${this.dispatchChange}\"\n                >${this.keyValue?'CLEAR':'SET'}</button>\n              </div>\n            `:``}\n            ${this.schemes[s].type==='oauth2'?html`\n              <div>\n              ${Object.keys(this.schemes[s].flows).map(f => html`\n                ${this.schemes[s].flows[f].authorizationUrl?html`<div><b>Auth URL:</b> <code class=\"url\"> ${this.schemes[s].flows[f].authorizationUrl}</code></div>`:``}\n                ${this.schemes[s].flows[f].tokenUrl?html`<div><b>Token URL:</b> <code class=\"url\"> ${this.schemes[s].flows[f].tokenUrl}</code></div>`:``}\n                ${this.schemes[s].flows[f].refreshUrl?html`<div><b>Refresh URL:</b> <code class=\"url\"> ${this.schemes[s].flows[f].refreshUrl}</code></div>`:``}\n                <div class=\"oauth\" style=\"margin:5px 0\">\n                  <input type=\"text\" name=\"client\" style=\"width:100px;\" placeholder=\"client-id\">\n                  <input type=\"text\" name=\"secret\" style=\"width:100px;\" placeholder=\"client-secret\">\n                </div>\n              `)}\n              </div>\n            `:``}\n          </td>\n          </tr>`\n        )}\n    </table>`\n  }\n\n  static get properties() {\n    return {\n      schemes: {type: Object},\n      keyValue:{type: String}\n    };\n\n  }\n\n  dispatchChange(e){\n    let apiEl = e.target.closest(\".api-key\");\n    if (!apiEl){\n      return;\n    }\n\n    let keyType  = apiEl.dataset.type;\n    let keyLocation = apiEl.dataset.in;\n    let keyName  = apiEl.dataset.name;\n    \n    if (e.target.dataset.action === \"CLEAR\"){\n      this.keyValue = \"\";\n      let tokenEl = apiEl.querySelector(\"input[name=token]\");\n      if (tokenEl){\n        tokenEl.value=\"\";\n      }\n    }\n    else{\n      if (keyType===\"apiKey\"){\n        let tokenEl = apiEl.querySelector(\"input[name=token]\");\n        if (tokenEl){\n          this.keyValue = tokenEl.value;\n        }\n\n      }\n      else if (keyType===\"http\"){\n        let securityScheme=apiEl.dataset.scheme;\n        if (securityScheme===\"basic\"){\n          let userNameEl = apiEl.querySelector(\"input[name=username]\");\n          let passwordEl = apiEl.querySelector(\"input[name=password]\");\n          if (userNameEl && passwordEl){\n            this.keyValue = 'Basic '+ btoa(userNameEl.value+\":\"+passwordEl.value);\n          }\n    \n        }\n        else if (securityScheme===\"bearer\"){\n          let tokenEl = apiEl.querySelector(\"input[name=token]\");\n          if (tokenEl){\n            this.keyValue = \"Bearer \" + tokenEl.value;\n          }\n        }\n      }\n    }\n\n\n    let event = new CustomEvent(\"change\", {\n      detail: {\n        keyType:keyType,\n        keyName:keyName,\n        keyValue:this.keyValue,\n        keyLocation:keyLocation,\n      }\n    });\n    this.dispatchEvent(event);\n      \n  }\n\n\n}\n// Register the element with the browser\ncustomElements.define('security-schemes', SecuritySchemes);\n","import { LitElement, html, css} from 'lit-element'; \nimport {unsafeHTML} from 'lit-html/directives/unsafe-html.js';\nimport MLogo from '@/components/m-logo'; \nimport EndPoints from '@/components/end-points'; \nimport SecuritySchemes from '@/components/security-schemes'; \n\nimport FontStyles from '@/styles/font-styles';\nimport InputStyles from '@/styles/input-styles';\nimport FlexStyles from '@/styles/flex-styles';\nimport TableStyles from '@/styles/table-styles';\n\nimport vars from '@/styles/vars';\nimport ProcessSpec from '@/utils/parse-utils';\nimport marked from 'marked';\nimport clonedeep from 'lodash.clonedeep';\nimport debounce  from 'lodash.debounce';\n\nexport default class RapiDoc extends LitElement {\n\n  render() {\n    return html`\n      ${FontStyles}\n      ${InputStyles}\n      ${FlexStyles}\n      ${TableStyles}\n      ${this.theme==='dark'?\n      html`<style>\n        :host{\n          --bg:#333;\n          --bg2:#444;\n          --fg:#bbb;\n          --fg2:#aaa;\n          --light-fg:#777;\n          --very-light-fg:#666;\n          --pre-border-color:#666;\n          --pre-fg:#fff;\n          --pre-bg:#222;\n          --code-fg:#ccc;\n          --code-bg:transparent;\n          --border-color:#666;\n          --input-bg:#303030;\n          --input-border-color:#297aa2;\n          --placeholder-color:#666;\n          --light-border-color:#444;\n          --light-get-color:#2a2a2a;\n          --light-put-color:#2a2a2a;\n          --light-post-color:#2a2a2a;\n          --light-delete-color:#2a2a2a;\n          --light-patch-color:#2a2a2a;\n          --hover-color:#2a2a2a;\n        }\n      </style>`\n      :html`<style>\n        :host{\n          --bg:#fff;\n          --bg2:#fafafa;\n          --fg:#333;\n          --fg2:#565656;\n          --light-fg:#999;\n          --very-light-fg:#bbb;\n          --pre-border-color:#000;\n          --pre-fg:#ccc;\n          --pre-bg:#263238;\n          --code-fg:#ccc;\n          --code-bg:transparent;\n          --border-color:#ccc;\n          --input-bg:#fff;\n          --input-border-color:#C5D9E8;\n          --placeholder-color:#dedede;\n          --light-border-color:#eee;\n          --light-get-color:#eff8fd;\n          --light-put-color:#fff5e6;\n          --light-post-color:#fbfff0;\n          --light-delete-color:#fff0f0;\n          --light-patch-color:#fff5cc;\n          --hover-color:#f7f7f7;\n        }\n      </style>`}      \n      <style>\n        :host{\n          --error-color:#ff3333;\n          --success-color:#47AFE8;\n          --hover-bg:#f7f7f7;\n          --get-color:#47AFE8;\n          --put-color:#FF9900;\n          --post-color:#99CC00;\n          --delete-color:#F06560;\n          --patch-color:#fc0;\n          --link-color:#47AFE8;\n          --primary-color:${this.primaryColor?`${this.primaryColor}`:`#FF791A`};\n          --dark-primary-color:${vars.color.brightness(this.primaryColor?this.primaryColor:'#FF791A', -30)};\n          --primary-text:${this.primaryColor?`${vars.color.invert(this.primaryColor)}`:`#ffffff`};\n          --header-bg:${this.headerColor?`${this.headerColor}`:`#444`};\n          --header-fg:${this.headerColor?`${vars.color.invert(this.headerColor)}`:`#ccc`};\n          --layout:${this.layout?`${this.layout}`:`row`};\n          --font-mono:${this.monoFont?`${this.monoFont}`:`Monaco, 'Andale Mono', 'Roboto Mono', Consolas`}; \n          --font-regular:${this.regularFont?`${this.regularFont}`:`rapidoc, Helvetica, Arial`};\n          --title-font-size:16px;\n          --border-radius:2px;\n\n          display:block;\n          min-width:375px;\n          width:100%;\n          height:100%;\n          margin:0;\n          padding:0;\n          overflow: auto;\n          letter-spacing:normal;\n          color:var(--fg);\n          background-color:var(--bg);\n          font-family:var(--font-regular);\n        }\n\n        .body-container{ \n          margin:0;\n        }\n        .section-gap { \n          padding: 24px 8px 8px 8px; \n        }\n\n        .logo { \n          height:36px;\n          width:36px;\n          margin-left:5px; \n        }\n        .only-large-screen-flex,\n        .only-large-screen{\n          display:none;\n        }\n        .header-title{\n          font-size:24px; padding:0 8px;\n        }\n        .tag{\n          text-transform: uppercase;\n        }\n        .header{\n          background-color:var(--header-bg);\n          color:var(--header-fg);\n        }\n\n        input.header-input{\n          background:${this.headerColor?vars.color.brightness(this.headerColor, -20):vars.color.inputReverseBg};\n          color:var(--header-fg);\n          border:1px solid var(--dark-primary-color);\n          flex:1; \n          padding-right:24px;\n          border-radius:3px;\n        }\n        input.header-input::placeholder {\n          opacity:0.4;\n        }\n\n\n        @media only screen and (min-width: 768px){\n          .only-large-screen{\n            display:block;\n          }\n          .only-large-screen-flex{\n            display:flex;\n          }\n          .body-container{ \n            margin:0 16px;\n          }\n          .section-gap { \n            padding: 24px 24px 8px 24px; \n          }\n        }\n\n      </style>\n\n      ${this.showHeader==='false'?'':html`\n      <div class=\"row header regular-font\" style=\"padding:8px 4px 8px 4px;min-height:48px;position:sticky;top:0;flex:1\">\n        <div class=\"only-large-screen-flex\" style=\"align-items: center;\">\n          <slot name=\"logo\" class=\"logo\">\n            <m-logo style=\"height:36px;width:36px;margin-left:5px\"></m-logo>\n          </slot>  \n          <div class=\"header-title\">${this.headingText}</div>\n        </div>  \n        <div style=\"margin: 0px 8px;display:flex;flex:1\">\n\n          ${ (this.allowSpecUrlLoad==='false') ?``:html`\n            <input id=\"spec-url\" type=\"text\" class=\"header-input\" placeholder=\"Spec URL\" value=\"${this.specUrl?this.specUrl:''}\" @change=\"${this.onSepcUrlChange}\">\n            <div style=\"margin: 6px 5px 0 -24px; font-size:18px; cursor:pointer;\">&#x23ce;</div>\n          `} \n          \n          ${ (this.allowSpecFileLoad==='false') ?``:html`\n            <input id=\"spec-file\" type=\"file\" style=\"display:none\" value=\"${this.specFile?this.specFile:''}\" @change=\"${this.onSepcFileChange}\" >\n            <button class=\"m-btn only-large-screen\" style=\"margin-left:10px;\"  @click=\"${this.onFileLoadClick}\"> LOCAL JSON FILE </button>\n          `}\n\n          ${ (this.allowSearch==='false') ?``:html`  \n            <input id=\"search\" class=\"header-input\" type=\"text\"  placeholder=\"search\" @change=\"${this.onSearchChange}\" style=\"max-width:130px;margin-left:10px;\">\n            <div style=\"margin: 6px 5px 0 -24px; font-size:18px; cursor:pointer;\">&#x23ce;</div>\n          `}\n        </div>\n      </div>`}\n\n      <div class=\"body-container regular-font\">\n        <slot></slot>\n        ${ (this.showInfo==='false' || !this.resolvedSpec || !this.resolvedSpec.info) ?``:html`\n        <div class=\"section-gap\">\n          <div class=\"title\">\n            ${this.resolvedSpec.info.title}\n            ${!this.resolvedSpec.info.version?\"\":html`\n              <span style=\"font-size:14px;font-weight:bold\">\n                ${this.resolvedSpec.info.version}\n              </span>`\n            }\n          </div>\n          ${this.resolvedSpec.info.description?html`\n            ${unsafeHTML(`<div class='m-markdown regular-font'>${marked(this.resolvedSpec.info.description)}</div>`)}\n          `:``}\n        </div>`\n        }\n\n        ${(this.allowTry==='false' || !this.resolvedSpec || !this.resolvedSpec.servers || this.resolvedSpec.servers.length===0) ?``:html`\n        <div class=\"sub-title regular-font section-gap\">\n          <a id=\"api_server_options\"> API SERVER: </a>\n          <div style=\"margin: 8px 0; font-size:12px\">\n            ${this.resolvedSpec.servers.map(server => html`\n                <input type='radio' name='api_server' value='${server.url}' @change=\"${this.onApiServerChange}\" checked style='margin:0 0 5px 8px'/>\n                ${server.url}<br/>\n              `)} \n          </div>\n        </div>  \n        `}\n\n        ${(this.allowAuthentication==='false' || !this.resolvedSpec || !this.resolvedSpec.securitySchemes)?'':html`\n        <div class=\"sub-title regular-font section-gap\">\n          <security-schemes \n            .schemes=\"${this.resolvedSpec.securitySchemes}\" \n            @change=\"${this.onSecurityChange}\"\n          ></security-schemes>\n        </div>\n        `}\n\n        ${this.resolvedSpec && this.resolvedSpec.tags ?html`\n          ${this.resolvedSpec.tags.map(tag => html`\n            <div class=\"sub-title tag regular-font section-gap\">${tag.name}</div>\n            <div style=\"margin:4px 20px\">\n              ${unsafeHTML(`<div class='m-markdown regular-font'>${marked(tag.description?tag.description:'')}</div>`)}\n            </div>\n            <end-points \n              server           = \"${this.server?this.server:''}\"  \n              api-key-name     = \"${this.apiKeyName?this.apiKeyName:''}\"\n              api-key-value    = \"${this.apiKeyValue?this.apiKeyValue:''}\"\n              api-key-location = \"${this.apiKeyLocation?this.apiKeyLocation:''}\"\n              layout           = \"${this.layout?this.layout:'row'}\"\n              .paths           = \"${tag.paths}\" \n              allow-try        = \"${this.allowTry}\"\n              match-paths      = \"${this.matchPaths}\"\n            ></end-points>\n          `)}`\n        :''}\n        <slot name=\"footer\"></slot>\n      </div>  \n    `}\n\n    static get properties() {\n      return {\n        specUrl : { type: String, attribute: 'spec-url' },\n        specFile: { type: String, attribute: false },\n        server  : { type: String },\n        matchPaths  : { type: String, attribute: 'match-paths' },        \n        headingText : { type: String, attribute: 'heading-text'  },\n        headerColor : { type: String, attribute: 'header-color'  },\n        primaryColor: { type: String, attribute: 'primary-color' },\n        regularFont : { type: String, attribute: 'regular-font'  },\n        monoFont    : { type: String, attribute: 'mono-font'   },\n        showHeader  : { type: String, attribute: 'show-header' },\n        showInfo    : { type: String, attribute: 'show-info'   },\n        allowAuthentication: { type: String, attribute: 'allow-authentication' },\n        allowTry    : { type: String, attribute: 'allow-try'    },\n        allowSpecUrlLoad: { type: String, attribute: 'allow-spec-url-load' },\n        allowSpecFileLoad: { type: String, attribute: 'allow-spec-file-load' },\n        allowSearch : { type: String, attribute: 'allow-search' },\n        layout  : { type: String },\n        theme   : { type: String },\n        logoUrl : { type: String , attribute: 'logo-url' },\n        apiKeyName    : { type: String, attribute: 'api-key-name' },\n        apiKeyValue   : { type: String, attribute: 'api-key-value' },\n        apiKeyLocation: { type: String, attribute: 'api-key-location' },\n      };\n    }\n    attributeChangedCallback(name, oldVal, newVal) {\n      if (name=='spec-url'){\n        console.log(\"url changed\")\n        if (oldVal !== newVal){\n          this.loadSpec(newVal);\n        }\n      }\n      super.attributeChangedCallback(name, oldVal, newVal);\n    }\n\n    onSepcUrlChange(e){\n      this.setAttribute('spec-url', this.shadowRoot.getElementById('spec-url').value);\n    }\n\n    onSepcFileChange(e){\n      let me = this;\n      this.setAttribute('spec-file', this.shadowRoot.getElementById('spec-file').value);\n      let specFile = e.target.files[0];\n      let reader = new FileReader();\n      reader.onload = function(e) {\n        try{\n          let specObj = JSON.parse(reader.result);\n          me.loadSpec(specObj);\n          me.shadowRoot.getElementById('spec-url').value=\"\";\n        }\n        catch{\n          alert(\"Unable to read or parse json\");\n          console.log(\"Unable to read or parse json\")\n        }\n        \n      }\n      // Read the Text file\n      reader.readAsText(specFile);\t\n\n    }\n\n    onFileLoadClick(){\n      this.shadowRoot.getElementById('spec-file').click();\n    }\n\n    onApiServerChange(){\n      let apiServerRadioEl = this.shadowRoot.querySelector(\"input[name='api_server']:checked\");\n      if (apiServerRadioEl !== null){\n        this.server = apiServerRadioEl.value;\n      }\n    }\n\n    onSecurityChange(e){\n      this.apiKeyName = e.detail.keyName\n      this.apiKeyValue = e.detail.keyValue\n      this.apiKeyLocation= e.detail.keyLocation;\n    }\n\n    onSearchChange(e){\n      this.matchPaths = e.target.value;\n    }\n\n    loadSpec(specUrl) {\n      let me = this;\n      if (!specUrl){\n        return;\n      }\n      this.apiKeyName     = \"\";\n      this.apiKeyValue    = \"\";\n      this.apiKeyLocation = \"\";\n      this.server         = \"\";\n      this.matchPaths     = \"\";\n\n      ProcessSpec(specUrl).then(function(spec){\n        if (spec===undefined || spec === null){\n          console.error('Onoes! The API is invalid. ');\n        }\n        console.log(spec);\n        me.afterSpecParsedAndValidated(spec);\n      })\n      .catch(function(err) {\n        me.loading=false;\n        alert(\"The API Spec is invalid or not readable \");\n        console.error('Onoes! The API is invalid. ' + err.message);\n      });\n    }\n\n    afterSpecParsedAndValidated(spec, isReloadingSpec=false){\n      let me = this;\n      this.resolvedSpec = clonedeep(spec); //spec;\n      this.resolvedSpecMaster = clonedeep(spec);\n      this.requestUpdate();\n      window.setTimeout(function(){\n        me.onApiServerChange()\n      },0);\n\n    }\n}\ncustomElements.define('rapi-doc', RapiDoc);\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACiGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAzDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC+CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrDA;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiFA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnFA;;;;;;;;ACwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACqFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACsKA;;;;;;ACnNA;;;;;;;;;;;;;;;;;;;;;;;ACqBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA","sourceRoot":""}